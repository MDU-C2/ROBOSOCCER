
robosoccer-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000622c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006530  08006530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006538  08006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800653c  0800653c  0000753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006540  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006550  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080065b0  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  240000d0  08006610  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000404  08006610  00008404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018134  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00022758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003587f  00000000  00000000  00024279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001433f  00000000  00000000  00059af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001494bd  00000000  00000000  0006de37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b72f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  001b7338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001bb3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080064e0 	.word	0x080064e0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	080064e0 	.word	0x080064e0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 ff4c 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f812 	bl	800062c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 fa94 	bl	8000b34 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 800060c:	f000 f88e 	bl	800072c <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8000610:	f000 fa28 	bl	8000a64 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 fa86 	bl	8000b24 <_ZL22MX_USB_OTG_HS_USB_Initv>
  MX_I2C1_Init();
 8000618:	f000 f8da 	bl	80007d0 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 800061c:	f000 f926 	bl	800086c <_ZL12MX_I2C2_Initv>
  MX_I2C4_Init();
 8000620:	f000 f972 	bl	8000908 <_ZL12MX_I2C4_Initv>
  MX_UART5_Init();
 8000624:	f000 f9be 	bl	80009a4 <_ZL13MX_UART5_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x2c>

0800062c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 ff24 	bl	8006488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 ff1e 	bl	8006488 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f001 ffd9 	bl	8002604 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <_Z18SystemClock_Configv+0xfc>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a33      	ldr	r2, [pc, #204]	@ (8000728 <_Z18SystemClock_Configv+0xfc>)
 800065c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <_Z18SystemClock_Configv+0xfc>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066e:	bf00      	nop
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <_Z18SystemClock_Configv+0xfc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f3      	bne.n	8000670 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000688:	2321      	movs	r3, #33	@ 0x21
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006a2:	f240 1313 	movw	r3, #275	@ 0x113
 80006a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006b4:	2304      	movs	r3, #4
 80006b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ffd7 	bl	8002678 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80006da:	f000 fb35 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	@ 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ea:	2308      	movs	r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ee:	2340      	movs	r3, #64	@ 0x40
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006f2:	2340      	movs	r3, #64	@ 0x40
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2103      	movs	r1, #3
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fb91 	bl	8002e2c <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800071a:	f000 fb15 	bl	8000d48 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3770      	adds	r7, #112	@ 0x70
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	58024800 	.word	0x58024800

0800072c <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <_ZL11MX_ETH_Initv+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000736:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 8000744:	22e1      	movs	r2, #225	@ 0xe1
 8000746:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 800075c:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <_ZL11MX_ETH_Initv+0x94>)
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000768:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <_ZL11MX_ETH_Initv+0x98>)
 800076a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 800076e:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <_ZL11MX_ETH_Initv+0x9c>)
 8000770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000774:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800077a:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <_ZL11MX_ETH_Initv+0x8c>)
 800077c:	f001 f818 	bl	80017b0 <HAL_ETH_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8000790:	f000 fada 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000794:	2238      	movs	r2, #56	@ 0x38
 8000796:	2100      	movs	r1, #0
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <_ZL11MX_ETH_Initv+0xa0>)
 800079a:	f005 fe75 	bl	8006488 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <_ZL11MX_ETH_Initv+0xa0>)
 80007a0:	2221      	movs	r2, #33	@ 0x21
 80007a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <_ZL11MX_ETH_Initv+0xa0>)
 80007a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <_ZL11MX_ETH_Initv+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24000124 	.word	0x24000124
 80007bc:	40028000 	.word	0x40028000
 80007c0:	240003f8 	.word	0x240003f8
 80007c4:	24000070 	.word	0x24000070
 80007c8:	24000010 	.word	0x24000010
 80007cc:	240000ec 	.word	0x240000ec

080007d0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <_ZL12MX_I2C1_Initv+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007dc:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <_ZL12MX_I2C1_Initv+0x98>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 800080c:	f001 fdc6 	bl	800239c <HAL_I2C_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000820:	f000 fa92 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	480e      	ldr	r0, [pc, #56]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 8000828:	f001 fe54 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800083c:	f000 fa84 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <_ZL12MX_I2C1_Initv+0x90>)
 8000844:	f001 fe91 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000858:	f000 fa76 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	240001d4 	.word	0x240001d4
 8000864:	40005400 	.word	0x40005400
 8000868:	60404e72 	.word	0x60404e72

0800086c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <_ZL12MX_I2C2_Initv+0x94>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000876:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 8000878:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <_ZL12MX_I2C2_Initv+0x98>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 80008a8:	f001 fd78 	bl	800239c <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bf14      	ite	ne
 80008b2:	2301      	movne	r3, #1
 80008b4:	2300      	moveq	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80008bc:	f000 fa44 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 80008c4:	f001 fe06 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80008d8:	f000 fa36 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4807      	ldr	r0, [pc, #28]	@ (80008fc <_ZL12MX_I2C2_Initv+0x90>)
 80008e0:	f001 fe43 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf14      	ite	ne
 80008ea:	2301      	movne	r3, #1
 80008ec:	2300      	moveq	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80008f4:	f000 fa28 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000228 	.word	0x24000228
 8000900:	40005800 	.word	0x40005800
 8000904:	60404e72 	.word	0x60404e72

08000908 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	@ (800099c <_ZL12MX_I2C4_Initv+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000914:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <_ZL12MX_I2C4_Initv+0x98>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000942:	4815      	ldr	r0, [pc, #84]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000944:	f001 fd2a 	bl	800239c <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf14      	ite	ne
 800094e:	2301      	movne	r3, #1
 8000950:	2300      	moveq	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000958:	f000 f9f6 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 8000960:	f001 fdb8 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf14      	ite	ne
 800096a:	2301      	movne	r3, #1
 800096c:	2300      	moveq	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000974:	f000 f9e8 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4807      	ldr	r0, [pc, #28]	@ (8000998 <_ZL12MX_I2C4_Initv+0x90>)
 800097c:	f001 fdf5 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf14      	ite	ne
 8000986:	2301      	movne	r3, #1
 8000988:	2300      	moveq	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000990:	f000 f9da 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2400027c 	.word	0x2400027c
 800099c:	58001c00 	.word	0x58001c00
 80009a0:	60404e72 	.word	0x60404e72

080009a4 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009a8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <_ZL13MX_UART5_Initv+0xbc>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ec:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 80009ee:	f004 fb6b 	bl	80050c8 <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf14      	ite	ne
 80009f8:	2301      	movne	r3, #1
 80009fa:	2300      	moveq	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <_ZL13MX_UART5_Initv+0x62>
  {
    Error_Handler();
 8000a02:	f000 f9a1 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 8000a0a:	f005 fc72 	bl	80062f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf14      	ite	ne
 8000a14:	2301      	movne	r3, #1
 8000a16:	2300      	moveq	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <_ZL13MX_UART5_Initv+0x7e>
  {
    Error_Handler();
 8000a1e:	f000 f993 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 8000a26:	f005 fca2 	bl	800636e <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <_ZL13MX_UART5_Initv+0x9a>
  {
    Error_Handler();
 8000a3a:	f000 f985 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <_ZL13MX_UART5_Initv+0xb8>)
 8000a40:	f005 fc1e 	bl	8006280 <HAL_UARTEx_DisableFifoMode>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <_ZL13MX_UART5_Initv+0xb4>
  {
    Error_Handler();
 8000a54:	f000 f978 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	240002d0 	.word	0x240002d0
 8000a60:	40005000 	.word	0x40005000

08000a64 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b20 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aac:	481b      	ldr	r0, [pc, #108]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aae:	f004 fb0b 	bl	80050c8 <HAL_UART_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000ac2:	f000 f941 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aca:	f005 fc12 	bl	80062f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ade:	f000 f933 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ae6:	f005 fc42 	bl	800636e <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000afa:	f000 f925 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b00:	f005 fbbe 	bl	8006280 <HAL_UARTEx_DisableFifoMode>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000b14:	f000 f918 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000364 	.word	0x24000364
 8000b20:	40004800 	.word	0x40004800

08000b24 <_ZL22MX_USB_OTG_HS_USB_Initv>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b78      	ldr	r3, [pc, #480]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	4a76      	ldr	r2, [pc, #472]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5a:	4b74      	ldr	r3, [pc, #464]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b68:	4b70      	ldr	r3, [pc, #448]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b6c      	ldr	r3, [pc, #432]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b69      	ldr	r3, [pc, #420]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a67      	ldr	r2, [pc, #412]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b65      	ldr	r3, [pc, #404]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b61      	ldr	r3, [pc, #388]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	4a60      	ldr	r2, [pc, #384]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a58      	ldr	r2, [pc, #352]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b56      	ldr	r3, [pc, #344]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b52      	ldr	r3, [pc, #328]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a51      	ldr	r2, [pc, #324]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a49      	ldr	r2, [pc, #292]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1c:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	4a42      	ldr	r2, [pc, #264]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c40:	483b      	ldr	r0, [pc, #236]	@ (8000d30 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000c42:	f001 fb91 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4c:	4839      	ldr	r0, [pc, #228]	@ (8000d34 <_ZL12MX_GPIO_Initv+0x200>)
 8000c4e:	f001 fb8b 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	4838      	ldr	r0, [pc, #224]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x204>)
 8000c58:	f001 fb86 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	@ (8000d3c <_ZL12MX_GPIO_Initv+0x208>)
 8000c72:	f001 f9d1 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c76:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4828      	ldr	r0, [pc, #160]	@ (8000d30 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000c90:	f001 f9c2 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	@ (8000d34 <_ZL12MX_GPIO_Initv+0x200>)
 8000cae:	f001 f9b3 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481e      	ldr	r0, [pc, #120]	@ (8000d40 <_ZL12MX_GPIO_Initv+0x20c>)
 8000cc8:	f001 f9a6 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4818      	ldr	r0, [pc, #96]	@ (8000d44 <_ZL12MX_GPIO_Initv+0x210>)
 8000ce2:	f001 f999 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <_ZL12MX_GPIO_Initv+0x210>)
 8000d04:	f001 f988 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x204>)
 8000d20:	f001 f97a 	bl	8002018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58020c00 	.word	0x58020c00
 8000d38:	58021000 	.word	0x58021000
 8000d3c:	58020800 	.word	0x58020800
 8000d40:	58021800 	.word	0x58021800
 8000d44:	58020000 	.word	0x58020000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	@ 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a59      	ldr	r2, [pc, #356]	@ (8000f0c <HAL_ETH_MspInit+0x184>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	f040 80ab 	bne.w	8000f02 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dac:	4b58      	ldr	r3, [pc, #352]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db2:	4a57      	ldr	r2, [pc, #348]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dbc:	4b54      	ldr	r3, [pc, #336]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dca:	4b51      	ldr	r3, [pc, #324]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dda:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000de8:	4b49      	ldr	r3, [pc, #292]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dee:	4a48      	ldr	r2, [pc, #288]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df8:	4b45      	ldr	r3, [pc, #276]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b42      	ldr	r3, [pc, #264]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a40      	ldr	r2, [pc, #256]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	4a31      	ldr	r2, [pc, #196]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e60:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	4a2a      	ldr	r2, [pc, #168]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e7e:	2332      	movs	r3, #50	@ 0x32
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8e:	230b      	movs	r3, #11
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481e      	ldr	r0, [pc, #120]	@ (8000f14 <HAL_ETH_MspInit+0x18c>)
 8000e9a:	f001 f8bd 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e9e:	2386      	movs	r3, #134	@ 0x86
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4817      	ldr	r0, [pc, #92]	@ (8000f18 <HAL_ETH_MspInit+0x190>)
 8000eba:	f001 f8ad 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4810      	ldr	r0, [pc, #64]	@ (8000f1c <HAL_ETH_MspInit+0x194>)
 8000edc:	f001 f89c 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ee0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <HAL_ETH_MspInit+0x198>)
 8000efe:	f001 f88b 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	@ 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40028000 	.word	0x40028000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020800 	.word	0x58020800
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58021800 	.word	0x58021800

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0bc      	sub	sp, #240	@ 0xf0
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	22b8      	movs	r2, #184	@ 0xb8
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fa9f 	bl	8006488 <memset>
  if(hi2c->Instance==I2C1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a73      	ldr	r2, [pc, #460]	@ (800111c <HAL_I2C_MspInit+0x1f8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d146      	bne.n	8000fe2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f54:	f04f 0208 	mov.w	r2, #8
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 faea 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff fee7 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b69      	ldr	r3, [pc, #420]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a67      	ldr	r2, [pc, #412]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b65      	ldr	r3, [pc, #404]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f98:	23c0      	movs	r3, #192	@ 0xc0
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9e:	2312      	movs	r3, #18
 8000fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4859      	ldr	r0, [pc, #356]	@ (8001124 <HAL_I2C_MspInit+0x200>)
 8000fbe:	f001 f82b 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc8:	4a55      	ldr	r2, [pc, #340]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000fca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd2:	4b53      	ldr	r3, [pc, #332]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000fe0:	e097      	b.n	8001112 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <HAL_I2C_MspInit+0x204>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d146      	bne.n	800107a <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fec:	f04f 0208 	mov.w	r2, #8
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fa9e 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800100e:	f7ff fe9b 	bl	8000d48 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a41      	ldr	r2, [pc, #260]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b3f      	ldr	r3, [pc, #252]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001030:	2303      	movs	r3, #3
 8001032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001036:	2312      	movs	r3, #18
 8001038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001048:	2304      	movs	r3, #4
 800104a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800104e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001052:	4619      	mov	r1, r3
 8001054:	4835      	ldr	r0, [pc, #212]	@ (800112c <HAL_I2C_MspInit+0x208>)
 8001056:	f000 ffdf 	bl	8002018 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105a:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 800105c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8001062:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001066:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800106a:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 800106c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
}
 8001078:	e04b      	b.n	8001112 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C4)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2c      	ldr	r2, [pc, #176]	@ (8001130 <HAL_I2C_MspInit+0x20c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d146      	bne.n	8001112 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001084:	f04f 0210 	mov.w	r2, #16
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fa52 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0x186>
      Error_Handler();
 80010a6:	f7ff fe4f 	bl	8000d48 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010c8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ec:	4619      	mov	r1, r3
 80010ee:	480f      	ldr	r0, [pc, #60]	@ (800112c <HAL_I2C_MspInit+0x208>)
 80010f0:	f000 ff92 	bl	8002018 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 80010f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_I2C_MspInit+0x1fc>)
 8001106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
}
 8001112:	bf00      	nop
 8001114:	37f0      	adds	r7, #240	@ 0xf0
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40005400 	.word	0x40005400
 8001120:	58024400 	.word	0x58024400
 8001124:	58020400 	.word	0x58020400
 8001128:	40005800 	.word	0x40005800
 800112c:	58021400 	.word	0x58021400
 8001130:	58001c00 	.word	0x58001c00

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0bc      	sub	sp, #240	@ 0xf0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	22b8      	movs	r2, #184	@ 0xb8
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f997 	bl	8006488 <memset>
  if(huart->Instance==UART5)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a60      	ldr	r2, [pc, #384]	@ (80012e0 <HAL_UART_MspInit+0x1ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d16c      	bne.n	800123e <HAL_UART_MspInit+0x10a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001164:	f04f 0202 	mov.w	r2, #2
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f9e2 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001186:	f7ff fddf 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800118a:	4b56      	ldr	r3, [pc, #344]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001190:	4a54      	ldr	r2, [pc, #336]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 8001192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001196:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800119a:	4b52      	ldr	r3, [pc, #328]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 800119c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b4e      	ldr	r3, [pc, #312]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	4a4d      	ldr	r2, [pc, #308]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b8:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011cc:	4a45      	ldr	r2, [pc, #276]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d6:	4b43      	ldr	r3, [pc, #268]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80011fe:	230e      	movs	r3, #14
 8001200:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001208:	4619      	mov	r1, r3
 800120a:	4837      	ldr	r0, [pc, #220]	@ (80012e8 <HAL_UART_MspInit+0x1b4>)
 800120c:	f000 ff04 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001214:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800122a:	2308      	movs	r3, #8
 800122c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001234:	4619      	mov	r1, r3
 8001236:	482d      	ldr	r0, [pc, #180]	@ (80012ec <HAL_UART_MspInit+0x1b8>)
 8001238:	f000 feee 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800123c:	e04b      	b.n	80012d6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <HAL_UART_MspInit+0x1bc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d146      	bne.n	80012d6 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001248:	f04f 0202 	mov.w	r2, #2
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f970 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0x13a>
      Error_Handler();
 800126a:	f7ff fd6d 	bl	8000d48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 8001270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 8001280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_UART_MspInit+0x1b0>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c4:	2307      	movs	r3, #7
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <HAL_UART_MspInit+0x1c0>)
 80012d2:	f000 fea1 	bl	8002018 <HAL_GPIO_Init>
}
 80012d6:	bf00      	nop
 80012d8:	37f0      	adds	r7, #240	@ 0xf0
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40005000 	.word	0x40005000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020400 	.word	0x58020400
 80012ec:	58020800 	.word	0x58020800
 80012f0:	40004800 	.word	0x40004800
 80012f4:	58020c00 	.word	0x58020c00

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f917 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800135c:	4b32      	ldr	r3, [pc, #200]	@ (8001428 <SystemInit+0xd0>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001362:	4a31      	ldr	r2, [pc, #196]	@ (8001428 <SystemInit+0xd0>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <SystemInit+0xd4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	2b06      	cmp	r3, #6
 8001376:	d807      	bhi.n	8001388 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <SystemInit+0xd4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 030f 	bic.w	r3, r3, #15
 8001380:	4a2a      	ldr	r2, [pc, #168]	@ (800142c <SystemInit+0xd4>)
 8001382:	f043 0307 	orr.w	r3, r3, #7
 8001386:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <SystemInit+0xd8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <SystemInit+0xd8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001394:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <SystemInit+0xd8>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <SystemInit+0xd8>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4924      	ldr	r1, [pc, #144]	@ (8001430 <SystemInit+0xd8>)
 80013a0:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <SystemInit+0xdc>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <SystemInit+0xd4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <SystemInit+0xd4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 030f 	bic.w	r3, r3, #15
 80013ba:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <SystemInit+0xd4>)
 80013bc:	f043 0307 	orr.w	r3, r3, #7
 80013c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <SystemInit+0xd8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <SystemInit+0xd8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <SystemInit+0xd8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <SystemInit+0xd8>)
 80013d6:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <SystemInit+0xe0>)
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <SystemInit+0xd8>)
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <SystemInit+0xe4>)
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <SystemInit+0xd8>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <SystemInit+0xe8>)
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <SystemInit+0xd8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <SystemInit+0xd8>)
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <SystemInit+0xe8>)
 80013f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <SystemInit+0xd8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <SystemInit+0xd8>)
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <SystemInit+0xe8>)
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <SystemInit+0xd8>)
 8001400:	2200      	movs	r2, #0
 8001402:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <SystemInit+0xd8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <SystemInit+0xd8>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <SystemInit+0xd8>)
 8001412:	2200      	movs	r2, #0
 8001414:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <SystemInit+0xec>)
 8001418:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800141c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	52002000 	.word	0x52002000
 8001430:	58024400 	.word	0x58024400
 8001434:	eaf6ed7f 	.word	0xeaf6ed7f
 8001438:	02020200 	.word	0x02020200
 800143c:	01ff0000 	.word	0x01ff0000
 8001440:	01010280 	.word	0x01010280
 8001444:	52004000 	.word	0x52004000

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800144c:	f7ff ff84 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f005 f80f 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147a:	f7ff f8bf 	bl	80005fc <main>
  bx  lr
 800147e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001484:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001488:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800148c:	08006540 	.word	0x08006540
  ldr r2, =_sbss
 8001490:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001494:	24000404 	.word	0x24000404

08001498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC3_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f952 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a8:	f001 fe76 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4913      	ldr	r1, [pc, #76]	@ (8001508 <HAL_Init+0x6c>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_Init+0x68>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_Init+0x6c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_Init+0x70>)
 80014de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_Init+0x74>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f814 	bl	8001514 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e002      	b.n	80014fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f6:	f7ff fc2d 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	58024400 	.word	0x58024400
 8001508:	080064f8 	.word	0x080064f8
 800150c:	24000004 	.word	0x24000004
 8001510:	24000000 	.word	0x24000000

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_InitTick+0x60>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e021      	b.n	800156c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_InitTick+0x64>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_InitTick+0x60>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f929 	bl	8001796 <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800155c:	f000 f901 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	@ (800157c <HAL_InitTick+0x68>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2400000c 	.word	0x2400000c
 8001578:	24000000 	.word	0x24000000
 800157c:	24000008 	.word	0x24000008

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2400000c 	.word	0x2400000c
 80015a4:	24000400 	.word	0x24000400

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	24000400 	.word	0x24000400

080015c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80015d0:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58000400 	.word	0x58000400

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <__NVIC_SetPriorityGrouping+0x40>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	4313      	orrs	r3, r2
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x40>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00
 800162c:	05fa0000 	.word	0x05fa0000

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	@ (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	@ (800169c <__NVIC_SetPriority+0x50>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff47 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff5e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb2 	bl	8001708 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0e3      	b.n	800198a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2223      	movs	r2, #35	@ 0x23
 80017d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fad7 	bl	8000d88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b6e      	ldr	r3, [pc, #440]	@ (8001994 <HAL_ETH_Init+0x1e4>)
 80017dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e0:	4a6c      	ldr	r2, [pc, #432]	@ (8001994 <HAL_ETH_Init+0x1e4>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_ETH_Init+0x1e4>)
 80017ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7a1b      	ldrb	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fedd 	bl	80015c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001806:	e003      	b.n	8001810 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001808:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800180c:	f7ff fed8 	bl	80015c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001810:	4b61      	ldr	r3, [pc, #388]	@ (8001998 <HAL_ETH_Init+0x1e8>)
 8001812:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800182a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800182c:	f7ff febc 	bl	80015a8 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001832:	e011      	b.n	8001858 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001834:	f7ff feb8 	bl	80015a8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001842:	d909      	bls.n	8001858 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2204      	movs	r2, #4
 8001848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	22e0      	movs	r2, #224	@ 0xe0
 8001850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e098      	b.n	800198a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e4      	bne.n	8001834 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f89e 	bl	80019ac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001870:	f001 fe0c 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8001874:	4603      	mov	r3, r0
 8001876:	4a49      	ldr	r2, [pc, #292]	@ (800199c <HAL_ETH_Init+0x1ec>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	0c9a      	lsrs	r2, r3, #18
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3a01      	subs	r2, #1
 8001884:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fa81 	bl	8001d90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001896:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800189a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018aa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	22e0      	movs	r2, #224	@ 0xe0
 80018c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e05d      	b.n	800198a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_ETH_Init+0x1f0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6952      	ldr	r2, [r2, #20]
 80018e2:	0051      	lsls	r1, r2, #1
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fae9 	bl	8001eca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb2f 	bl	8001f5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	3305      	adds	r3, #5
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	021a      	lsls	r2, r3, #8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	3303      	adds	r3, #3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	061a      	lsls	r2, r3, #24
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	3302      	adds	r3, #2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800193c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800194a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800194c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_ETH_Init+0x1f4>)
 800195e:	430b      	orrs	r3, r1
 8001960:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_ETH_Init+0x1f8>)
 8001972:	430b      	orrs	r3, r1
 8001974:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2210      	movs	r2, #16
 8001984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	58024400 	.word	0x58024400
 8001998:	58000400 	.word	0x58000400
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	ffff8001 	.word	0xffff8001
 80019a4:	0c020060 	.word	0x0c020060
 80019a8:	0c20c000 	.word	0x0c20c000

080019ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019c6:	f001 fd61 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80019ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d804      	bhi.n	80019de <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e022      	b.n	8001a24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <HAL_ETH_SetMDIOClockRange+0x90>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d204      	bcs.n	80019f0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e019      	b.n	8001a24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <HAL_ETH_SetMDIOClockRange+0x94>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d915      	bls.n	8001a24 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <HAL_ETH_SetMDIOClockRange+0x98>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d804      	bhi.n	8001a0a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e00c      	b.n	8001a24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d804      	bhi.n	8001a1c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e003      	b.n	8001a24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a22:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	02160ebf 	.word	0x02160ebf
 8001a3c:	03938700 	.word	0x03938700
 8001a40:	05f5e0ff 	.word	0x05f5e0ff
 8001a44:	08f0d17f 	.word	0x08f0d17f
 8001a48:	0ee6b27f 	.word	0x0ee6b27f

08001a4c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	7b1b      	ldrb	r3, [r3, #12]
 8001a6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	7b5b      	ldrb	r3, [r3, #13]
 8001a74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	7b9b      	ldrb	r3, [r3, #14]
 8001a7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	7bdb      	ldrb	r3, [r3, #15]
 8001a84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	7c12      	ldrb	r2, [r2, #16]
 8001a8c:	2a00      	cmp	r2, #0
 8001a8e:	d102      	bne.n	8001a96 <ETH_SetMACConfig+0x4a>
 8001a90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a94:	e000      	b.n	8001a98 <ETH_SetMACConfig+0x4c>
 8001a96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	7c52      	ldrb	r2, [r2, #17]
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetMACConfig+0x5c>
 8001aa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetMACConfig+0x5e>
 8001aa8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7c9b      	ldrb	r3, [r3, #18]
 8001ab0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ab2:	431a      	orrs	r2, r3
               macconf->Speed |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ab8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001abe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7f1b      	ldrb	r3, [r3, #28]
 8001ac4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ac6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	7f5b      	ldrb	r3, [r3, #29]
 8001acc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ace:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	7f92      	ldrb	r2, [r2, #30]
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d102      	bne.n	8001ade <ETH_SetMACConfig+0x92>
 8001ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001adc:	e000      	b.n	8001ae0 <ETH_SetMACConfig+0x94>
 8001ade:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ae0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7fdb      	ldrb	r3, [r3, #31]
 8001ae6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ae8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d102      	bne.n	8001afa <ETH_SetMACConfig+0xae>
 8001af4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001af8:	e000      	b.n	8001afc <ETH_SetMACConfig+0xb0>
 8001afa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001afc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b56      	ldr	r3, [pc, #344]	@ (8001c78 <ETH_SetMACConfig+0x22c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d102      	bne.n	8001b5e <ETH_SetMACConfig+0x112>
 8001b58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b5c:	e000      	b.n	8001b60 <ETH_SetMACConfig+0x114>
 8001b5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4b42      	ldr	r3, [pc, #264]	@ (8001c7c <ETH_SetMACConfig+0x230>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <ETH_SetMACConfig+0x234>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ba8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d101      	bne.n	8001bbe <ETH_SetMACConfig+0x172>
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	e000      	b.n	8001bc0 <ETH_SetMACConfig+0x174>
 8001bbe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bc0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bd2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001be8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001bf0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfe:	f023 0103 	bic.w	r1, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c16:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d101      	bne.n	8001c3a <ETH_SetMACConfig+0x1ee>
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0x1f0>
 8001c3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001c44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001c4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001c5c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	00048083 	.word	0x00048083
 8001c7c:	c0f88000 	.word	0xc0f88000
 8001c80:	fffffef0 	.word	0xfffffef0

08001c84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <ETH_SetDMAConfig+0xf8>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6811      	ldr	r1, [r2, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001caa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7b1b      	ldrb	r3, [r3, #12]
 8001cbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <ETH_SetDMAConfig+0xfc>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cdc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	7b5b      	ldrb	r3, [r3, #13]
 8001ce2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <ETH_SetDMAConfig+0x100>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d08:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	7f5b      	ldrb	r3, [r3, #29]
 8001d1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <ETH_SetDMAConfig+0x104>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7f1b      	ldrb	r3, [r3, #28]
 8001d46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d58:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <ETH_SetDMAConfig+0x108>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	ffff87fd 	.word	0xffff87fd
 8001d80:	ffff2ffe 	.word	0xffff2ffe
 8001d84:	fffec000 	.word	0xfffec000
 8001d88:	ffc0efef 	.word	0xffc0efef
 8001d8c:	7fc0ffff 	.word	0x7fc0ffff

08001d90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0a4      	sub	sp, #144	@ 0x90
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001de8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001dec:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e3a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e44:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fde6 	bl	8001a4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ea4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ea8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001eb0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fee1 	bl	8001c84 <ETH_SetDMAConfig>
}
 8001ec2:	bf00      	nop
 8001ec4:	3790      	adds	r7, #144	@ 0x90
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e01d      	b.n	8001f14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	3206      	adds	r2, #6
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d9de      	bls.n	8001ed8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e023      	b.n	8001fb2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	3212      	adds	r2, #18
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d9d8      	bls.n	8001f6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002026:	4b86      	ldr	r3, [pc, #536]	@ (8002240 <HAL_GPIO_Init+0x228>)
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800202a:	e18c      	b.n	8002346 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 817e 	beq.w	8002340 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x44>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 0201 	and.w	r2, r3, #1
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	69b9      	ldr	r1, [r7, #24]
 800214a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0203 	and.w	r2, r3, #3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80d8 	beq.w	8002340 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_GPIO_Init+0x22c>)
 8002192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002196:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_GPIO_Init+0x22c>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021a0:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <HAL_GPIO_Init+0x22c>)
 80021a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <HAL_GPIO_Init+0x230>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_GPIO_Init+0x234>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d04a      	beq.n	8002270 <HAL_GPIO_Init+0x258>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_GPIO_Init+0x238>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02b      	beq.n	800223a <HAL_GPIO_Init+0x222>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_GPIO_Init+0x23c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x21e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_GPIO_Init+0x240>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_GPIO_Init+0x244>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <HAL_GPIO_Init+0x248>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_GPIO_Init+0x24c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a16      	ldr	r2, [pc, #88]	@ (8002268 <HAL_GPIO_Init+0x250>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x20a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a15      	ldr	r2, [pc, #84]	@ (800226c <HAL_GPIO_Init+0x254>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x206>
 800221a:	2309      	movs	r3, #9
 800221c:	e029      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 800221e:	230a      	movs	r3, #10
 8002220:	e027      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 8002222:	2307      	movs	r3, #7
 8002224:	e025      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 8002226:	2306      	movs	r3, #6
 8002228:	e023      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 800222a:	2305      	movs	r3, #5
 800222c:	e021      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 800222e:	2304      	movs	r3, #4
 8002230:	e01f      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 8002232:	2303      	movs	r3, #3
 8002234:	e01d      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 8002236:	2302      	movs	r3, #2
 8002238:	e01b      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 800223a:	2301      	movs	r3, #1
 800223c:	e019      	b.n	8002272 <HAL_GPIO_Init+0x25a>
 800223e:	bf00      	nop
 8002240:	58000080 	.word	0x58000080
 8002244:	58024400 	.word	0x58024400
 8002248:	58000400 	.word	0x58000400
 800224c:	58020000 	.word	0x58020000
 8002250:	58020400 	.word	0x58020400
 8002254:	58020800 	.word	0x58020800
 8002258:	58020c00 	.word	0x58020c00
 800225c:	58021000 	.word	0x58021000
 8002260:	58021400 	.word	0x58021400
 8002264:	58021800 	.word	0x58021800
 8002268:	58021c00 	.word	0x58021c00
 800226c:	58022400 	.word	0x58022400
 8002270:	2300      	movs	r3, #0
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002282:	4938      	ldr	r1, [pc, #224]	@ (8002364 <HAL_GPIO_Init+0x34c>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f ae6b 	bne.w	800202c <HAL_GPIO_Init+0x14>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3724      	adds	r7, #36	@ 0x24
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	58000400 	.word	0x58000400

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08b      	b.n	80024c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fdae 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	@ 0x24
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e006      	b.n	8002424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d108      	bne.n	800243e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	e007      	b.n	800244e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800244c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_I2C_Init+0x134>)
 800245a:	430b      	orrs	r3, r1
 800245c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800246c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69d9      	ldr	r1, [r3, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	02008000 	.word	0x02008000

080024d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d138      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e032      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	@ 0x24
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d139      	bne.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258a:	2302      	movs	r3, #2
 800258c:	e033      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	@ 0x24
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d00a      	beq.n	800262e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e01f      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e01d      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	490f      	ldr	r1, [pc, #60]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4313      	orrs	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800263e:	f7fe ffb3 	bl	80015a8 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002644:	e009      	b.n	800265a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002646:	f7fe ffaf 	bl	80015a8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002654:	d901      	bls.n	800265a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e007      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002666:	d1ee      	bne.n	8002646 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	58024800 	.word	0x58024800

08002678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	@ 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e3c8      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8087 	beq.w	80027a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002698:	4b88      	ldr	r3, [pc, #544]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a2:	4b86      	ldr	r3, [pc, #536]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d007      	beq.n	80026be <HAL_RCC_OscConfig+0x46>
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	2b18      	cmp	r3, #24
 80026b2:	d110      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5e>
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d10b      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026be:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d06c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x12c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d168      	bne.n	80027a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e3a2      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x76>
 80026e0:	4b76      	ldr	r3, [pc, #472]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a75      	ldr	r2, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e02e      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x98>
 80026f6:	4b71      	ldr	r3, [pc, #452]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a70      	ldr	r2, [pc, #448]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6e      	ldr	r3, [pc, #440]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6d      	ldr	r2, [pc, #436]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0xbc>
 800271a:	4b68      	ldr	r3, [pc, #416]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a67      	ldr	r2, [pc, #412]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b65      	ldr	r3, [pc, #404]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a64      	ldr	r2, [pc, #400]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 8002734:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a60      	ldr	r2, [pc, #384]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b5e      	ldr	r3, [pc, #376]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ff28 	bl	80015a8 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe ff24 	bl	80015a8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e356      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276e:	4b53      	ldr	r3, [pc, #332]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xe4>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe ff14 	bl	80015a8 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe ff10 	bl	80015a8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e342      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002796:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x10c>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808c 	beq.w	80028cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b4:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027be:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_RCC_OscConfig+0x162>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b18      	cmp	r3, #24
 80027ce:	d137      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c8>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d132      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027da:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e314      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027f2:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0219 	bic.w	r2, r3, #25
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	492f      	ldr	r1, [pc, #188]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fed0 	bl	80015a8 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe fecc 	bl	80015a8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e2fe      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800281e:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	4920      	ldr	r1, [pc, #128]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283e:	e045      	b.n	80028cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d026      	beq.n	8002896 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002848:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0219 	bic.w	r2, r3, #25
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4919      	ldr	r1, [pc, #100]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fea5 	bl	80015a8 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe fea1 	bl	80015a8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e2d3      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	490b      	ldr	r1, [pc, #44]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_RCC_OscConfig+0x244>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fe81 	bl	80015a8 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fe7d 	bl	80015a8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e2af      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
 80028bc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c0:	4b96      	ldr	r3, [pc, #600]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d06a      	beq.n	80029ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d8:	4b90      	ldr	r3, [pc, #576]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e2:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d007      	beq.n	80028fe <HAL_RCC_OscConfig+0x286>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b18      	cmp	r3, #24
 80028f2:	d11b      	bne.n	800292c <HAL_RCC_OscConfig+0x2b4>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d116      	bne.n	800292c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fe:	4b87      	ldr	r3, [pc, #540]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x29e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b80      	cmp	r3, #128	@ 0x80
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e282      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002916:	4b81      	ldr	r3, [pc, #516]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	497d      	ldr	r1, [pc, #500]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292a:	e040      	b.n	80029ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d023      	beq.n	800297c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002934:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a78      	ldr	r2, [pc, #480]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 800293a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fe32 	bl	80015a8 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002948:	f7fe fe2e 	bl	80015a8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e260      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800295a:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002966:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	4969      	ldr	r1, [pc, #420]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800297c:	4b67      	ldr	r3, [pc, #412]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a66      	ldr	r2, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fe0e 	bl	80015a8 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002990:	f7fe fe0a 	bl	80015a8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e23c      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a2:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d019      	beq.n	80029f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c6:	4a55      	ldr	r2, [pc, #340]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fdeb 	bl	80015a8 <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe fde7 	bl	80015a8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e219      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x35e>
 80029f4:	e018      	b.n	8002a28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fa:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fdd1 	bl	80015a8 <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fdcd 	bl	80015a8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1ff      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d036      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3c:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fdae 	bl	80015a8 <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a50:	f7fe fdaa 	bl	80015a8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1dc      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x3d8>
 8002a6e:	e018      	b.n	8002aa2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a70:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a29      	ldr	r2, [pc, #164]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fd94 	bl	80015a8 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a84:	f7fe fd90 	bl	80015a8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e1c2      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a96:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8086 	beq.w	8002bbc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4a8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b20 <HAL_RCC_OscConfig+0x4a8>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fd74 	bl	80015a8 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fd70 	bl	80015a8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1a2      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_RCC_OscConfig+0x4a8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x480>
 8002aea:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4ac>
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_RCC_OscConfig+0x4a4>)
 8002b12:	f023 0304 	bic.w	r3, r3, #4
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b18:	e021      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e6>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	58024800 	.word	0x58024800
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4ce>
 8002b2c:	4b83      	ldr	r3, [pc, #524]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a82      	ldr	r2, [pc, #520]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b38:	4b80      	ldr	r3, [pc, #512]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a7f      	ldr	r2, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e6>
 8002b46:	4b7d      	ldr	r3, [pc, #500]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	4b7a      	ldr	r3, [pc, #488]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a79      	ldr	r2, [pc, #484]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fd1f 	bl	80015a8 <HAL_GetTick>
 8002b6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fd1b 	bl	80015a8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e14b      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b84:	4b6d      	ldr	r3, [pc, #436]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x4f6>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fd09 	bl	80015a8 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fd05 	bl	80015a8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e135      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bb0:	4b62      	ldr	r3, [pc, #392]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 812a 	beq.w	8002e1a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bce:	2b18      	cmp	r3, #24
 8002bd0:	f000 80ba 	beq.w	8002d48 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	f040 8095 	bne.w	8002d08 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b57      	ldr	r3, [pc, #348]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a56      	ldr	r2, [pc, #344]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002be4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fcdd 	bl	80015a8 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe fcd9 	bl	80015a8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e10b      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c04:	4b4d      	ldr	r3, [pc, #308]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c10:	4b4a      	ldr	r3, [pc, #296]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c14:	4b4a      	ldr	r3, [pc, #296]	@ (8002d40 <HAL_RCC_OscConfig+0x6c8>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	4945      	ldr	r1, [pc, #276]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	025b      	lsls	r3, r3, #9
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	3b01      	subs	r3, #1
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c5a:	4938      	ldr	r1, [pc, #224]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c60:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	4a35      	ldr	r2, [pc, #212]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c6c:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c70:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <HAL_RCC_OscConfig+0x6cc>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c78:	00d2      	lsls	r2, r2, #3
 8002c7a:	4930      	ldr	r1, [pc, #192]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c80:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	f023 020c 	bic.w	r2, r3, #12
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	492b      	ldr	r1, [pc, #172]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	f023 0202 	bic.w	r2, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4927      	ldr	r1, [pc, #156]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ca4:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	4a24      	ldr	r2, [pc, #144]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb0:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fc62 	bl	80015a8 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fc5e 	bl	80015a8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e090      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x670>
 8002d06:	e088      	b.n	8002e1a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fc48 	bl	80015a8 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fc44 	bl	80015a8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e076      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2e:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_RCC_OscConfig+0x6c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a4>
 8002d3a:	e06e      	b.n	8002e1a <HAL_RCC_OscConfig+0x7a2>
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	fffffc0c 	.word	0xfffffc0c
 8002d44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d4e:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d031      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d12a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d122      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0a5b      	lsrs	r3, r3, #9
 8002d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0e1b      	lsrs	r3, r3, #24
 8002db2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02b      	b.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d01f      	beq.n	8002e1a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	4a11      	ldr	r2, [pc, #68]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de6:	f7fe fbdf 	bl	80015a8 <HAL_GetTick>
 8002dea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dec:	bf00      	nop
 8002dee:	f7fe fbdb 	bl	80015a8 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d0f9      	beq.n	8002dee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_OscConfig+0x7b0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e06:	00d2      	lsls	r2, r2, #3
 8002e08:	4906      	ldr	r1, [pc, #24]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <HAL_RCC_OscConfig+0x7ac>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3730      	adds	r7, #48	@ 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	58024400 	.word	0x58024400
 8002e28:	ffff0007 	.word	0xffff0007

08002e2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e19c      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b8a      	ldr	r3, [pc, #552]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b87      	ldr	r3, [pc, #540]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	4985      	ldr	r1, [pc, #532]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b83      	ldr	r3, [pc, #524]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e184      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	4b7b      	ldr	r3, [pc, #492]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d908      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e8c:	4b78      	ldr	r3, [pc, #480]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	4975      	ldr	r1, [pc, #468]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	4b70      	ldr	r3, [pc, #448]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d908      	bls.n	8002ecc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	496a      	ldr	r1, [pc, #424]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d908      	bls.n	8002efa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ee8:	4b61      	ldr	r3, [pc, #388]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	495e      	ldr	r1, [pc, #376]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	4b59      	ldr	r3, [pc, #356]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f16:	4b56      	ldr	r3, [pc, #344]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4953      	ldr	r1, [pc, #332]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4b4d      	ldr	r3, [pc, #308]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d908      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b4a      	ldr	r3, [pc, #296]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f023 020f 	bic.w	r2, r3, #15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4947      	ldr	r1, [pc, #284]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d055      	beq.n	800300e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f62:	4b43      	ldr	r3, [pc, #268]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	4940      	ldr	r1, [pc, #256]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d121      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0f6      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f94:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d115      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0ea      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fac:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0de      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0d6      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fcc:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4925      	ldr	r1, [pc, #148]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fde:	f7fe fae3 	bl	80015a8 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7fe fadf 	bl	80015a8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0be      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	429a      	cmp	r2, r3
 800300c:	d1eb      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	429a      	cmp	r2, r3
 8003028:	d208      	bcs.n	800303c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302a:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f023 020f 	bic.w	r2, r3, #15
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	490e      	ldr	r1, [pc, #56]	@ (8003070 <HAL_RCC_ClockConfig+0x244>)
 8003038:	4313      	orrs	r3, r2
 800303a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d214      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 020f 	bic.w	r2, r3, #15
 8003052:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b04      	ldr	r3, [pc, #16]	@ (800306c <HAL_RCC_ClockConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e086      	b.n	800317a <HAL_RCC_ClockConfig+0x34e>
 800306c:	52002000 	.word	0x52002000
 8003070:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	4b3f      	ldr	r3, [pc, #252]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003090:	4b3c      	ldr	r3, [pc, #240]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4939      	ldr	r1, [pc, #228]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d208      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030be:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	492e      	ldr	r1, [pc, #184]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	4b28      	ldr	r3, [pc, #160]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d208      	bcs.n	80030fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030ec:	4b25      	ldr	r3, [pc, #148]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	4922      	ldr	r1, [pc, #136]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003116:	429a      	cmp	r2, r3
 8003118:	d208      	bcs.n	800312c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800311a:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4917      	ldr	r1, [pc, #92]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 8003128:	4313      	orrs	r3, r2
 800312a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800312c:	f000 f834 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4912      	ldr	r1, [pc, #72]	@ (8003188 <HAL_RCC_ClockConfig+0x35c>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314a:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_RCC_ClockConfig+0x358>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a0d      	ldr	r2, [pc, #52]	@ (8003188 <HAL_RCC_ClockConfig+0x35c>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <HAL_RCC_ClockConfig+0x360>)
 8003162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003164:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_RCC_ClockConfig+0x364>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_RCC_ClockConfig+0x368>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f9d0 	bl	8001514 <HAL_InitTick>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	58024400 	.word	0x58024400
 8003188:	080064f8 	.word	0x080064f8
 800318c:	24000004 	.word	0x24000004
 8003190:	24000000 	.word	0x24000000
 8003194:	24000008 	.word	0x24000008

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800319e:	4bb3      	ldr	r3, [pc, #716]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031a6:	2b18      	cmp	r3, #24
 80031a8:	f200 8155 	bhi.w	8003456 <HAL_RCC_GetSysClockFreq+0x2be>
 80031ac:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	08003219 	.word	0x08003219
 80031b8:	08003457 	.word	0x08003457
 80031bc:	08003457 	.word	0x08003457
 80031c0:	08003457 	.word	0x08003457
 80031c4:	08003457 	.word	0x08003457
 80031c8:	08003457 	.word	0x08003457
 80031cc:	08003457 	.word	0x08003457
 80031d0:	08003457 	.word	0x08003457
 80031d4:	0800323f 	.word	0x0800323f
 80031d8:	08003457 	.word	0x08003457
 80031dc:	08003457 	.word	0x08003457
 80031e0:	08003457 	.word	0x08003457
 80031e4:	08003457 	.word	0x08003457
 80031e8:	08003457 	.word	0x08003457
 80031ec:	08003457 	.word	0x08003457
 80031f0:	08003457 	.word	0x08003457
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003457 	.word	0x08003457
 80031fc:	08003457 	.word	0x08003457
 8003200:	08003457 	.word	0x08003457
 8003204:	08003457 	.word	0x08003457
 8003208:	08003457 	.word	0x08003457
 800320c:	08003457 	.word	0x08003457
 8003210:	08003457 	.word	0x08003457
 8003214:	0800324b 	.word	0x0800324b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003218:	4b94      	ldr	r3, [pc, #592]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003224:	4b91      	ldr	r3, [pc, #580]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	4a90      	ldr	r2, [pc, #576]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003236:	e111      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003238:	4b8d      	ldr	r3, [pc, #564]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800323a:	61bb      	str	r3, [r7, #24]
      break;
 800323c:	e10e      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800323e:	4b8d      	ldr	r3, [pc, #564]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003240:	61bb      	str	r3, [r7, #24]
      break;
 8003242:	e10b      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003244:	4b8c      	ldr	r3, [pc, #560]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003246:	61bb      	str	r3, [r7, #24]
      break;
 8003248:	e108      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003254:	4b85      	ldr	r3, [pc, #532]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800325e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003260:	4b82      	ldr	r3, [pc, #520]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800326a:	4b80      	ldr	r3, [pc, #512]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003282:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80e1 	beq.w	8003450 <HAL_RCC_GetSysClockFreq+0x2b8>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f000 8083 	beq.w	800339c <HAL_RCC_GetSysClockFreq+0x204>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b02      	cmp	r3, #2
 800329a:	f200 80a1 	bhi.w	80033e0 <HAL_RCC_GetSysClockFreq+0x248>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x114>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d056      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032aa:	e099      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ac:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02d      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032b8:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	08db      	lsrs	r3, r3, #3
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
 80032c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800347c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003312:	e087      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a02 	vldr	s12, [r7, #8]
 800333a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800347c <HAL_RCC_GetSysClockFreq+0x2e4>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003356:	e065      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003484 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a02 	vldr	s12, [r7, #8]
 800337e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800347c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339a:	e043      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b2f      	ldr	r3, [pc, #188]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800347c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033de:	e021      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003484 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a02 	vldr	s12, [r7, #8]
 8003406:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800347c <HAL_RCC_GetSysClockFreq+0x2e4>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003422:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	0a5b      	lsrs	r3, r3, #9
 800342a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800342e:	3301      	adds	r3, #1
 8003430:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800343c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003448:	ee17 3a90 	vmov	r3, s15
 800344c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003456:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003458:	61bb      	str	r3, [r7, #24]
      break;
 800345a:	bf00      	nop
  }

  return sysclockfreq;
 800345c:	69bb      	ldr	r3, [r7, #24]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	03d09000 	.word	0x03d09000
 8003474:	003d0900 	.word	0x003d0900
 8003478:	007a1200 	.word	0x007a1200
 800347c:	46000000 	.word	0x46000000
 8003480:	4c742400 	.word	0x4c742400
 8003484:	4a742400 	.word	0x4a742400
 8003488:	4af42400 	.word	0x4af42400

0800348c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003492:	f7ff fe81 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x50>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490f      	ldr	r1, [pc, #60]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b0:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x50>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80034c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ca:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58024400 	.word	0x58024400
 80034e0:	080064f8 	.word	0x080064f8
 80034e4:	24000004 	.word	0x24000004
 80034e8:	24000000 	.word	0x24000000

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034f0:	f7ff ffcc 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4904      	ldr	r1, [pc, #16]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	58024400 	.word	0x58024400
 8003514:	080064f8 	.word	0x080064f8

08003518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800351c:	f7ff ffb6 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	58024400 	.word	0x58024400
 8003540:	080064f8 	.word	0x080064f8

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0c6      	sub	sp, #280	@ 0x118
 800354a:	af00      	add	r7, sp, #0
 800354c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003556:	2300      	movs	r3, #0
 8003558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800355c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003568:	2500      	movs	r5, #0
 800356a:	ea54 0305 	orrs.w	r3, r4, r5
 800356e:	d049      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003576:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800357a:	d02f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800357c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003580:	d828      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003586:	d01a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800358c:	d822      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003596:	d007      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003598:	e01c      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359a:	4bab      	ldr	r3, [pc, #684]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	4aaa      	ldr	r2, [pc, #680]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a6:	e01a      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ac:	3308      	adds	r3, #8
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fc25 	bl	8004e00 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035bc:	e00f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c2:	3328      	adds	r3, #40	@ 0x28
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fccc 	bl	8004f64 <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035e6:	4b98      	ldr	r3, [pc, #608]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f4:	4a94      	ldr	r2, [pc, #592]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80035fa:	e003      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003610:	f04f 0900 	mov.w	r9, #0
 8003614:	ea58 0309 	orrs.w	r3, r8, r9
 8003618:	d047      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	2b04      	cmp	r3, #4
 8003622:	d82a      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003624:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003641 	.word	0x08003641
 8003630:	0800364f 	.word	0x0800364f
 8003634:	08003665 	.word	0x08003665
 8003638:	08003683 	.word	0x08003683
 800363c:	08003683 	.word	0x08003683
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b81      	ldr	r3, [pc, #516]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a80      	ldr	r2, [pc, #512]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364c:	e01a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003652:	3308      	adds	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fbd2 	bl	8004e00 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003662:	e00f      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003668:	3328      	adds	r3, #40	@ 0x28
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fc79 	bl	8004f64 <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003678:	e004      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368c:	4b6e      	ldr	r3, [pc, #440]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800368e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003690:	f023 0107 	bic.w	r1, r3, #7
 8003694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	4a6b      	ldr	r2, [pc, #428]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6513      	str	r3, [r2, #80]	@ 0x50
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80036b6:	f04f 0b00 	mov.w	fp, #0
 80036ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80036be:	d05b      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036c8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036cc:	d03b      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80036ce:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036d2:	d834      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d8:	d037      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036de:	d82e      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036e4:	d033      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80036e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036ea:	d828      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f0:	d01a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80036f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f6:	d822      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80036fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003700:	d007      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003702:	e01c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4b50      	ldr	r3, [pc, #320]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	4a4f      	ldr	r2, [pc, #316]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003710:	e01e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003716:	3308      	adds	r3, #8
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fb70 	bl	8004e00 <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003726:	e013      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	3328      	adds	r3, #40	@ 0x28
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fc17 	bl	8004f64 <RCCEx_PLL3_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003744:	e004      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003768:	4a37      	ldr	r2, [pc, #220]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6593      	str	r3, [r2, #88]	@ 0x58
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800378e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d05d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037a4:	d03b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037aa:	d834      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b0:	d037      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80037b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b6:	d82e      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037bc:	d033      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80037be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037c2:	d828      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037c8:	d01a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80037ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ce:	d822      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d8:	d007      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80037da:	e01c      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e8:	e01e      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ee:	3308      	adds	r3, #8
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fb04 	bl	8004e00 <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037fe:	e013      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003804:	3328      	adds	r3, #40	@ 0x28
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fbab 	bl	8004f64 <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003830:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003840:	4a01      	ldr	r2, [pc, #4]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003842:	430b      	orrs	r3, r1
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003848:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003860:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800386a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800386e:	460b      	mov	r3, r1
 8003870:	4313      	orrs	r3, r2
 8003872:	d03a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387a:	2b30      	cmp	r3, #48	@ 0x30
 800387c:	d01f      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800387e:	2b30      	cmp	r3, #48	@ 0x30
 8003880:	d819      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d00c      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003886:	2b20      	cmp	r3, #32
 8003888:	d815      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800388e:	2b10      	cmp	r3, #16
 8003890:	d111      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003892:	4baa      	ldr	r3, [pc, #680]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	4aa9      	ldr	r2, [pc, #676]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800389e:	e011      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a4:	3308      	adds	r3, #8
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 faa9 	bl	8004e00 <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038cc:	4b9b      	ldr	r3, [pc, #620]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	4a98      	ldr	r2, [pc, #608]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d051      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003914:	d035      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391a:	d82e      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800391c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003920:	d031      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003922:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003926:	d828      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392c:	d01a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003932:	d822      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393c:	d007      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800393e:	e01c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b7e      	ldr	r3, [pc, #504]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4a7d      	ldr	r2, [pc, #500]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800394c:	e01c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fa52 	bl	8004e00 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003968:	3328      	adds	r3, #40	@ 0x28
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 faf9 	bl	8004f64 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003990:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	4a67      	ldr	r2, [pc, #412]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d053      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d8:	d033      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80039da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039de:	d82c      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e4:	d02f      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80039e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ea:	d826      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039f0:	d02b      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039f6:	d820      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039fc:	d012      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80039fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a02:	d81a      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d022      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	3308      	adds	r3, #8
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f9f2 	bl	8004e00 <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a22:	e015      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	3328      	adds	r3, #40	@ 0x28
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fa99 	bl	8004f64 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a38:	e00a      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a58:	4b38      	ldr	r3, [pc, #224]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a66:	4a35      	ldr	r2, [pc, #212]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d058      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa2:	d033      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa8:	d82c      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d02f      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab4:	d826      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aba:	d02b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003abc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ac0:	d820      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ac6:	d012      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003acc:	d81a      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d022      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ad6:	d115      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003adc:	3308      	adds	r3, #8
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 f98d 	bl	8004e00 <RCCEx_PLL2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aec:	e015      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af2:	3328      	adds	r3, #40	@ 0x28
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fa34 	bl	8004f64 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b02:	e00a      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b0a:	e006      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b0c:	bf00      	nop
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b10:	bf00      	nop
 8003b12:	e002      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b14:	bf00      	nop
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b32:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4313      	orrs	r3, r2
 8003b66:	d037      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b72:	d00e      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b78:	d816      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b82:	d111      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4bc4      	ldr	r3, [pc, #784]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	4ac3      	ldr	r2, [pc, #780]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b90:	e00f      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f930 	bl	8004e00 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bba:	4bb7      	ldr	r3, [pc, #732]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc8:	4ab3      	ldr	r2, [pc, #716]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bce:	e003      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003be4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d039      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81c      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c19 	.word	0x08003c19
 8003c10:	08003c27 	.word	0x08003c27
 8003c14:	08003c45 	.word	0x08003c45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c18:	4b9f      	ldr	r3, [pc, #636]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	4a9e      	ldr	r2, [pc, #632]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f8e6 	bl	8004e00 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c4e:	4b92      	ldr	r3, [pc, #584]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	f023 0103 	bic.w	r1, r3, #3
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f000 8099 	beq.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8e:	4b83      	ldr	r3, [pc, #524]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a82      	ldr	r2, [pc, #520]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fc85 	bl	80015a8 <HAL_GetTick>
 8003c9e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fd fc80 	bl	80015a8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b64      	cmp	r3, #100	@ 0x64
 8003cb2:	d903      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cbc:	4b77      	ldr	r3, [pc, #476]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ed      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d173      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cd0:	4b71      	ldr	r3, [pc, #452]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cdc:	4053      	eors	r3, r2
 8003cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	4b69      	ldr	r3, [pc, #420]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf6:	4a68      	ldr	r2, [pc, #416]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfe:	4b66      	ldr	r3, [pc, #408]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	4a65      	ldr	r2, [pc, #404]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d0a:	4a63      	ldr	r2, [pc, #396]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fc42 	bl	80015a8 <HAL_GetTick>
 8003d24:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d28:	e00d      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fc3d 	bl	80015a8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d903      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003d44:	e005      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d46:	4b54      	ldr	r3, [pc, #336]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0eb      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003d52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d129      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d6a:	d10e      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d7c:	091a      	lsrs	r2, r3, #4
 8003d7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	4a45      	ldr	r2, [pc, #276]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6113      	str	r3, [r2, #16]
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003d8a:	4b43      	ldr	r3, [pc, #268]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	4a42      	ldr	r2, [pc, #264]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d94:	6113      	str	r3, [r2, #16]
 8003d96:	4b40      	ldr	r3, [pc, #256]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d98:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da6:	4a3c      	ldr	r2, [pc, #240]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 0301 	and.w	r3, r2, #1
 8003dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f000 808f 	beq.w	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de8:	2b28      	cmp	r3, #40	@ 0x28
 8003dea:	d871      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003ed9 	.word	0x08003ed9
 8003df8:	08003ed1 	.word	0x08003ed1
 8003dfc:	08003ed1 	.word	0x08003ed1
 8003e00:	08003ed1 	.word	0x08003ed1
 8003e04:	08003ed1 	.word	0x08003ed1
 8003e08:	08003ed1 	.word	0x08003ed1
 8003e0c:	08003ed1 	.word	0x08003ed1
 8003e10:	08003ed1 	.word	0x08003ed1
 8003e14:	08003ea5 	.word	0x08003ea5
 8003e18:	08003ed1 	.word	0x08003ed1
 8003e1c:	08003ed1 	.word	0x08003ed1
 8003e20:	08003ed1 	.word	0x08003ed1
 8003e24:	08003ed1 	.word	0x08003ed1
 8003e28:	08003ed1 	.word	0x08003ed1
 8003e2c:	08003ed1 	.word	0x08003ed1
 8003e30:	08003ed1 	.word	0x08003ed1
 8003e34:	08003ebb 	.word	0x08003ebb
 8003e38:	08003ed1 	.word	0x08003ed1
 8003e3c:	08003ed1 	.word	0x08003ed1
 8003e40:	08003ed1 	.word	0x08003ed1
 8003e44:	08003ed1 	.word	0x08003ed1
 8003e48:	08003ed1 	.word	0x08003ed1
 8003e4c:	08003ed1 	.word	0x08003ed1
 8003e50:	08003ed1 	.word	0x08003ed1
 8003e54:	08003ed9 	.word	0x08003ed9
 8003e58:	08003ed1 	.word	0x08003ed1
 8003e5c:	08003ed1 	.word	0x08003ed1
 8003e60:	08003ed1 	.word	0x08003ed1
 8003e64:	08003ed1 	.word	0x08003ed1
 8003e68:	08003ed1 	.word	0x08003ed1
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	08003ed1 	.word	0x08003ed1
 8003e74:	08003ed9 	.word	0x08003ed9
 8003e78:	08003ed1 	.word	0x08003ed1
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	08003ed1 	.word	0x08003ed1
 8003e88:	08003ed1 	.word	0x08003ed1
 8003e8c:	08003ed1 	.word	0x08003ed1
 8003e90:	08003ed1 	.word	0x08003ed1
 8003e94:	08003ed9 	.word	0x08003ed9
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	58024800 	.word	0x58024800
 8003ea0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 ffa7 	bl	8004e00 <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebe:	3328      	adds	r3, #40	@ 0x28
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f84e 	bl	8004f64 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ee2:	4bbf      	ldr	r3, [pc, #764]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef0:	4abb      	ldr	r2, [pc, #748]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f002 0302 	and.w	r3, r2, #2
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d041      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d824      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f49 	.word	0x08003f49
 8003f38:	08003f5f 	.word	0x08003f5f
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 ff55 	bl	8004e00 <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00f      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	3328      	adds	r3, #40	@ 0x28
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fffc 	bl	8004f64 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f86:	4b96      	ldr	r3, [pc, #600]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f023 0107 	bic.w	r1, r3, #7
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f94:	4a92      	ldr	r2, [pc, #584]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f002 0304 	and.w	r3, r2, #4
 8003fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d044      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d825      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	08003ff1 	.word	0x08003ff1
 8003fe0:	08004007 	.word	0x08004007
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08004025 	.word	0x08004025
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ff01 	bl	8004e00 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004004:	e00f      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400a:	3328      	adds	r3, #40	@ 0x28
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 ffa8 	bl	8004f64 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800401a:	e004      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800402e:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f023 0107 	bic.w	r1, r3, #7
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	4a68      	ldr	r2, [pc, #416]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004040:	430b      	orrs	r3, r1
 8004042:	6593      	str	r3, [r2, #88]	@ 0x58
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800404a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f002 0320 	and.w	r3, r2, #32
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004064:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d055      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407a:	d033      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800407c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004080:	d82c      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d02f      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408c:	d826      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800408e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004092:	d02b      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004094:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004098:	d820      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800409a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800409e:	d012      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a4:	d81a      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d022      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ae:	d115      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b4:	3308      	adds	r3, #8
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fea1 	bl	8004e00 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040c4:	e015      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ca:	3328      	adds	r3, #40	@ 0x28
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 ff48 	bl	8004f64 <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040da:	e00a      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040e2:	e006      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040e4:	bf00      	nop
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040fa:	4b39      	ldr	r3, [pc, #228]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410a:	4a35      	ldr	r2, [pc, #212]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004116:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800411a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004126:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004130:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d058      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800413a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004142:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004146:	d033      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004148:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800414c:	d82c      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004152:	d02f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d826      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800415a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800415e:	d02b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004164:	d820      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800416a:	d012      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800416c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004170:	d81a      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d022      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417a:	d115      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004180:	3308      	adds	r3, #8
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fe3b 	bl	8004e00 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004190:	e015      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004196:	3328      	adds	r3, #40	@ 0x28
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fee2 	bl	8004f64 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041a6:	e00a      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041ae:	e006      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041b0:	bf00      	nop
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d6:	4a02      	ldr	r2, [pc, #8]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6593      	str	r3, [r2, #88]	@ 0x58
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80041de:	bf00      	nop
 80041e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004202:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d055      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004210:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004214:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004218:	d033      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800421a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800421e:	d82c      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004224:	d02f      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422a:	d826      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800422c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004230:	d02b      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004232:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004236:	d820      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800423c:	d012      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800423e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004242:	d81a      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424c:	d115      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004252:	3308      	adds	r3, #8
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fdd2 	bl	8004e00 <RCCEx_PLL2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004262:	e015      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	2102      	movs	r1, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe79 	bl	8004f64 <RCCEx_PLL3_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004282:	bf00      	nop
 8004284:	e004      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004298:	4ba0      	ldr	r3, [pc, #640]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a8:	4a9c      	ldr	r2, [pc, #624]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ae:	e003      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 0308 	and.w	r3, r2, #8
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d01e      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ea:	3328      	adds	r3, #40	@ 0x28
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fe38 	bl	8004f64 <RCCEx_PLL3_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004300:	4b86      	ldr	r3, [pc, #536]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004310:	4a82      	ldr	r2, [pc, #520]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004312:	430b      	orrs	r3, r1
 8004314:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f002 0310 	and.w	r3, r2, #16
 8004322:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800432c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d01e      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004342:	d10c      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	3328      	adds	r3, #40	@ 0x28
 800434a:	2102      	movs	r1, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fe09 	bl	8004f64 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435e:	4b6f      	ldr	r3, [pc, #444]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436e:	4a6b      	ldr	r2, [pc, #428]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004370:	430b      	orrs	r3, r1
 8004372:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004382:	2300      	movs	r3, #0
 8004384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004386:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d03e      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004394:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800439c:	d022      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800439e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043a2:	d81b      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80043ae:	e015      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	3308      	adds	r3, #8
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd21 	bl	8004e00 <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ca:	3328      	adds	r3, #40	@ 0x28
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fdc8 	bl	8004f64 <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ee:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043fe:	4a47      	ldr	r2, [pc, #284]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004400:	430b      	orrs	r3, r1
 8004402:	6593      	str	r3, [r2, #88]	@ 0x58
 8004404:	e003      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800441a:	673b      	str	r3, [r7, #112]	@ 0x70
 800441c:	2300      	movs	r3, #0
 800441e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004420:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d03b      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800442a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004432:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004436:	d01f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004438:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800443c:	d818      	bhi.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004444:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004448:	d007      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800444a:	e011      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b33      	ldr	r3, [pc, #204]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	4a32      	ldr	r2, [pc, #200]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004458:	e00f      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445e:	3328      	adds	r3, #40	@ 0x28
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fd7e 	bl	8004f64 <RCCEx_PLL3_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004482:	4b26      	ldr	r3, [pc, #152]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004492:	4a22      	ldr	r2, [pc, #136]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6553      	str	r3, [r2, #84]	@ 0x54
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800449e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b0:	2300      	movs	r3, #0
 80044b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d034      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044cc:	d007      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80044ce:	e011      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4b12      	ldr	r3, [pc, #72]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044dc:	e00e      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e2:	3308      	adds	r3, #8
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fc8a 	bl	8004e00 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004512:	4a02      	ldr	r2, [pc, #8]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004514:	430b      	orrs	r3, r1
 8004516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004518:	e006      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004534:	663b      	str	r3, [r7, #96]	@ 0x60
 8004536:	2300      	movs	r3, #0
 8004538:	667b      	str	r3, [r7, #100]	@ 0x64
 800453a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d00c      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004548:	3328      	adds	r3, #40	@ 0x28
 800454a:	2102      	movs	r1, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fd09 	bl	8004f64 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800455e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800456a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800456c:	2300      	movs	r3, #0
 800456e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004570:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d036      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800457a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004584:	d018      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800458a:	d811      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800458c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004590:	d014      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004596:	d80b      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800459c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a2:	4bb7      	ldr	r3, [pc, #732]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4ab6      	ldr	r2, [pc, #728]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045ae:	e008      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045b8:	bf00      	nop
 80045ba:	e002      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ca:	4bad      	ldr	r3, [pc, #692]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d8:	4aa9      	ldr	r2, [pc, #676]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f6:	2300      	movs	r3, #0
 80045f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80045fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004604:	4b9e      	ldr	r3, [pc, #632]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	4a9b      	ldr	r2, [pc, #620]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004614:	430b      	orrs	r3, r1
 8004616:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004626:	2300      	movs	r3, #0
 8004628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800462a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004634:	4b92      	ldr	r3, [pc, #584]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800463c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004642:	4a8f      	ldr	r2, [pc, #572]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	2300      	movs	r3, #0
 8004658:	647b      	str	r3, [r7, #68]	@ 0x44
 800465a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004664:	4b86      	ldr	r3, [pc, #536]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	4a85      	ldr	r2, [pc, #532]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800466a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800466e:	6113      	str	r3, [r2, #16]
 8004670:	4b83      	ldr	r3, [pc, #524]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004672:	6919      	ldr	r1, [r3, #16]
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800467c:	4a80      	ldr	r2, [pc, #512]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800467e:	430b      	orrs	r3, r1
 8004680:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800468e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004690:	2300      	movs	r3, #0
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004694:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800469e:	4b78      	ldr	r3, [pc, #480]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	4a74      	ldr	r2, [pc, #464]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c0:	2300      	movs	r3, #0
 80046c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	4a68      	ldr	r2, [pc, #416]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	2100      	movs	r1, #0
 80046ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d011      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004704:	3308      	adds	r3, #8
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fb79 	bl	8004e00 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	2100      	movs	r1, #0
 800472e:	6239      	str	r1, [r7, #32]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
 8004736:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d011      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004744:	3308      	adds	r3, #8
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fb59 	bl	8004e00 <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004760:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	2100      	movs	r1, #0
 800476e:	61b9      	str	r1, [r7, #24]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d011      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004784:	3308      	adds	r3, #8
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fb39 	bl	8004e00 <RCCEx_PLL2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	2100      	movs	r1, #0
 80047ae:	6139      	str	r1, [r7, #16]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d011      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c4:	3328      	adds	r3, #40	@ 0x28
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fbcb 	bl	8004f64 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80047d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	2100      	movs	r1, #0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d011      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fbab 	bl	8004f64 <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	2100      	movs	r1, #0
 800482e:	6039      	str	r1, [r7, #0]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	e9d7 1200 	ldrd	r1, r2, [r7]
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d011      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fb8b 	bl	8004f64 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004864:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487e:	bf00      	nop
 8004880:	58024400 	.word	0x58024400

08004884 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004888:	f7fe fe00 	bl	800348c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	@ (80048ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	080064f8 	.word	0x080064f8

080048b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b089      	sub	sp, #36	@ 0x24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048c2:	4b9f      	ldr	r3, [pc, #636]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	0b1b      	lsrs	r3, r3, #12
 80048c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048ce:	4b9c      	ldr	r3, [pc, #624]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048da:	4b99      	ldr	r3, [pc, #612]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8111 	beq.w	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f000 8083 	beq.w	8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f200 80a1 	bhi.w	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d056      	beq.n	80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800491a:	e099      	b.n	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800491c:	4b88      	ldr	r3, [pc, #544]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02d      	beq.n	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004928:	4b85      	ldr	r3, [pc, #532]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	4a84      	ldr	r2, [pc, #528]	@ (8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
 8004938:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b7b      	ldr	r3, [pc, #492]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004962:	ed97 6a03 	vldr	s12, [r7, #12]
 8004966:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004982:	e087      	b.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b6a      	ldr	r3, [pc, #424]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c6:	e065      	b.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b59      	ldr	r3, [pc, #356]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0a:	e043      	b.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b48      	ldr	r3, [pc, #288]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e021      	b.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b37      	ldr	r3, [pc, #220]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a94:	4b2a      	ldr	r3, [pc, #168]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	0a5b      	lsrs	r3, r3, #9
 8004a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aba:	ee17 2a90 	vmov	r2, s15
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae8:	ee17 2a90 	vmov	r2, s15
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004af0:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	0e1b      	lsrs	r3, r3, #24
 8004af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b16:	ee17 2a90 	vmov	r2, s15
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b1e:	e008      	b.n	8004b32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	3724      	adds	r7, #36	@ 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	58024400 	.word	0x58024400
 8004b44:	03d09000 	.word	0x03d09000
 8004b48:	46000000 	.word	0x46000000
 8004b4c:	4c742400 	.word	0x4c742400
 8004b50:	4a742400 	.word	0x4a742400
 8004b54:	4af42400 	.word	0x4af42400

08004b58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b60:	4ba1      	ldr	r3, [pc, #644]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	0d1b      	lsrs	r3, r3, #20
 8004b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b76:	4b9c      	ldr	r3, [pc, #624]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b82:	4b99      	ldr	r3, [pc, #612]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8111 	beq.w	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f000 8083 	beq.w	8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f200 80a1 	bhi.w	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d056      	beq.n	8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bc2:	e099      	b.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc4:	4b88      	ldr	r3, [pc, #544]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02d      	beq.n	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd0:	4b85      	ldr	r3, [pc, #532]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	08db      	lsrs	r3, r3, #3
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	4a84      	ldr	r2, [pc, #528]	@ (8004dec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c2a:	e087      	b.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6e:	e065      	b.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cb2:	e043      	b.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b48      	ldr	r3, [pc, #288]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf6:	e021      	b.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	0a5b      	lsrs	r3, r3, #9
 8004d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d62:	ee17 2a90 	vmov	r2, s15
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d90:	ee17 2a90 	vmov	r2, s15
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dbe:	ee17 2a90 	vmov	r2, s15
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dc6:	e008      	b.n	8004dda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
}
 8004dda:	bf00      	nop
 8004ddc:	3724      	adds	r7, #36	@ 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	03d09000 	.word	0x03d09000
 8004df0:	46000000 	.word	0x46000000
 8004df4:	4c742400 	.word	0x4c742400
 8004df8:	4a742400 	.word	0x4a742400
 8004dfc:	4af42400 	.word	0x4af42400

08004e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e0e:	4b53      	ldr	r3, [pc, #332]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d101      	bne.n	8004e1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e099      	b.n	8004f52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a4e      	ldr	r2, [pc, #312]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fbbd 	bl	80015a8 <HAL_GetTick>
 8004e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e32:	f7fc fbb9 	bl	80015a8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e086      	b.n	8004f52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e44:	4b45      	ldr	r3, [pc, #276]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e50:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	493f      	ldr	r1, [pc, #252]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	025b      	lsls	r3, r3, #9
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e94:	4931      	ldr	r1, [pc, #196]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e9a:	4b30      	ldr	r3, [pc, #192]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	492d      	ldr	r1, [pc, #180]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004eac:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f023 0220 	bic.w	r2, r3, #32
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	4928      	ldr	r1, [pc, #160]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ebe:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a26      	ldr	r2, [pc, #152]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ec4:	f023 0310 	bic.w	r3, r3, #16
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004eca:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ece:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <RCCEx_PLL2_Config+0x160>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	69d2      	ldr	r2, [r2, #28]
 8004ed6:	00d2      	lsls	r2, r2, #3
 8004ed8:	4920      	ldr	r1, [pc, #128]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ede:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	f043 0310 	orr.w	r3, r3, #16
 8004ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004efc:	e00f      	b.n	8004f1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d106      	bne.n	8004f12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f04:	4b15      	ldr	r3, [pc, #84]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	4a14      	ldr	r2, [pc, #80]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f10:	e005      	b.n	8004f1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f12:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a11      	ldr	r2, [pc, #68]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a0e      	ldr	r2, [pc, #56]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fc fb3d 	bl	80015a8 <HAL_GetTick>
 8004f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f30:	e008      	b.n	8004f44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f32:	f7fc fb39 	bl	80015a8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e006      	b.n	8004f52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <RCCEx_PLL2_Config+0x15c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	ffff0007 	.word	0xffff0007

08004f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f72:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d101      	bne.n	8004f82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e099      	b.n	80050b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f82:	4b4f      	ldr	r3, [pc, #316]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a4e      	ldr	r2, [pc, #312]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8e:	f7fc fb0b 	bl	80015a8 <HAL_GetTick>
 8004f92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f96:	f7fc fb07 	bl	80015a8 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e086      	b.n	80050b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fa8:	4b45      	ldr	r3, [pc, #276]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fb4:	4b42      	ldr	r3, [pc, #264]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	051b      	lsls	r3, r3, #20
 8004fc2:	493f      	ldr	r1, [pc, #252]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	025b      	lsls	r3, r3, #9
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ff8:	4931      	ldr	r1, [pc, #196]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ffe:	4b30      	ldr	r3, [pc, #192]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	492d      	ldr	r1, [pc, #180]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800500c:	4313      	orrs	r3, r2
 800500e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005010:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4928      	ldr	r1, [pc, #160]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005022:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800502e:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005032:	4b24      	ldr	r3, [pc, #144]	@ (80050c4 <RCCEx_PLL3_Config+0x160>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	69d2      	ldr	r2, [r2, #28]
 800503a:	00d2      	lsls	r2, r2, #3
 800503c:	4920      	ldr	r1, [pc, #128]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005042:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005054:	4b1a      	ldr	r3, [pc, #104]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800505a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800505e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005060:	e00f      	b.n	8005082 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d106      	bne.n	8005076 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005068:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	4a14      	ldr	r2, [pc, #80]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800506e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005072:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005074:	e005      	b.n	8005082 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a11      	ldr	r2, [pc, #68]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005082:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a0e      	ldr	r2, [pc, #56]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508e:	f7fc fa8b 	bl	80015a8 <HAL_GetTick>
 8005092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005094:	e008      	b.n	80050a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005096:	f7fc fa87 	bl	80015a8 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e006      	b.n	80050b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	58024400 	.word	0x58024400
 80050c4:	ffff0007 	.word	0xffff0007

080050c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e042      	b.n	8005160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fc f821 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	@ 0x24
 80050f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fe94 	bl	8005e40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f825 	bl	8005168 <UART_SetConfig>
 800511e:	4603      	mov	r3, r0
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01b      	b.n	8005160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 ff13 	bl	8005f84 <UART_CheckIdleState>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b092      	sub	sp, #72	@ 0x48
 800516e:	af00      	add	r7, sp, #0
 8005170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4bbe      	ldr	r3, [pc, #760]	@ (8005490 <UART_SetConfig+0x328>)
 8005198:	4013      	ands	r3, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4ab3      	ldr	r2, [pc, #716]	@ (8005494 <UART_SetConfig+0x32c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d0:	4313      	orrs	r3, r2
 80051d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4baf      	ldr	r3, [pc, #700]	@ (8005498 <UART_SetConfig+0x330>)
 80051dc:	4013      	ands	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	f023 010f 	bic.w	r1, r3, #15
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4aa6      	ldr	r2, [pc, #664]	@ (800549c <UART_SetConfig+0x334>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d177      	bne.n	80052f8 <UART_SetConfig+0x190>
 8005208:	4ba5      	ldr	r3, [pc, #660]	@ (80054a0 <UART_SetConfig+0x338>)
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005210:	2b28      	cmp	r3, #40	@ 0x28
 8005212:	d86d      	bhi.n	80052f0 <UART_SetConfig+0x188>
 8005214:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0xb4>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	080052c1 	.word	0x080052c1
 8005220:	080052f1 	.word	0x080052f1
 8005224:	080052f1 	.word	0x080052f1
 8005228:	080052f1 	.word	0x080052f1
 800522c:	080052f1 	.word	0x080052f1
 8005230:	080052f1 	.word	0x080052f1
 8005234:	080052f1 	.word	0x080052f1
 8005238:	080052f1 	.word	0x080052f1
 800523c:	080052c9 	.word	0x080052c9
 8005240:	080052f1 	.word	0x080052f1
 8005244:	080052f1 	.word	0x080052f1
 8005248:	080052f1 	.word	0x080052f1
 800524c:	080052f1 	.word	0x080052f1
 8005250:	080052f1 	.word	0x080052f1
 8005254:	080052f1 	.word	0x080052f1
 8005258:	080052f1 	.word	0x080052f1
 800525c:	080052d1 	.word	0x080052d1
 8005260:	080052f1 	.word	0x080052f1
 8005264:	080052f1 	.word	0x080052f1
 8005268:	080052f1 	.word	0x080052f1
 800526c:	080052f1 	.word	0x080052f1
 8005270:	080052f1 	.word	0x080052f1
 8005274:	080052f1 	.word	0x080052f1
 8005278:	080052f1 	.word	0x080052f1
 800527c:	080052d9 	.word	0x080052d9
 8005280:	080052f1 	.word	0x080052f1
 8005284:	080052f1 	.word	0x080052f1
 8005288:	080052f1 	.word	0x080052f1
 800528c:	080052f1 	.word	0x080052f1
 8005290:	080052f1 	.word	0x080052f1
 8005294:	080052f1 	.word	0x080052f1
 8005298:	080052f1 	.word	0x080052f1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052f1 	.word	0x080052f1
 80052a4:	080052f1 	.word	0x080052f1
 80052a8:	080052f1 	.word	0x080052f1
 80052ac:	080052f1 	.word	0x080052f1
 80052b0:	080052f1 	.word	0x080052f1
 80052b4:	080052f1 	.word	0x080052f1
 80052b8:	080052f1 	.word	0x080052f1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e326      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e322      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e31e      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e31a      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052e0:	2320      	movs	r3, #32
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e316      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052e8:	2340      	movs	r3, #64	@ 0x40
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e312      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e30e      	b.n	8005916 <UART_SetConfig+0x7ae>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a69      	ldr	r2, [pc, #420]	@ (80054a4 <UART_SetConfig+0x33c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d130      	bne.n	8005364 <UART_SetConfig+0x1fc>
 8005302:	4b67      	ldr	r3, [pc, #412]	@ (80054a0 <UART_SetConfig+0x338>)
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b05      	cmp	r3, #5
 800530c:	d826      	bhi.n	800535c <UART_SetConfig+0x1f4>
 800530e:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <UART_SetConfig+0x1ac>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	0800532d 	.word	0x0800532d
 8005318:	08005335 	.word	0x08005335
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e2f0      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e2ec      	b.n	8005916 <UART_SetConfig+0x7ae>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e2e8      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e2e4      	b.n	8005916 <UART_SetConfig+0x7ae>
 800534c:	2320      	movs	r3, #32
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e2e0      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005354:	2340      	movs	r3, #64	@ 0x40
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e2dc      	b.n	8005916 <UART_SetConfig+0x7ae>
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005362:	e2d8      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a4f      	ldr	r2, [pc, #316]	@ (80054a8 <UART_SetConfig+0x340>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d130      	bne.n	80053d0 <UART_SetConfig+0x268>
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <UART_SetConfig+0x338>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b05      	cmp	r3, #5
 8005378:	d826      	bhi.n	80053c8 <UART_SetConfig+0x260>
 800537a:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <UART_SetConfig+0x218>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005399 	.word	0x08005399
 8005384:	080053a1 	.word	0x080053a1
 8005388:	080053a9 	.word	0x080053a9
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e2ba      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e2b6      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e2b2      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e2ae      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053b8:	2320      	movs	r3, #32
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e2aa      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053c0:	2340      	movs	r3, #64	@ 0x40
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e2a6      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e2a2      	b.n	8005916 <UART_SetConfig+0x7ae>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	@ (80054ac <UART_SetConfig+0x344>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d130      	bne.n	800543c <UART_SetConfig+0x2d4>
 80053da:	4b31      	ldr	r3, [pc, #196]	@ (80054a0 <UART_SetConfig+0x338>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d826      	bhi.n	8005434 <UART_SetConfig+0x2cc>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0x284>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e284      	b.n	8005916 <UART_SetConfig+0x7ae>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e280      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e27c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e278      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e274      	b.n	8005916 <UART_SetConfig+0x7ae>
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e270      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e26c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <UART_SetConfig+0x348>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d142      	bne.n	80054cc <UART_SetConfig+0x364>
 8005446:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <UART_SetConfig+0x338>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b05      	cmp	r3, #5
 8005450:	d838      	bhi.n	80054c4 <UART_SetConfig+0x35c>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x2f0>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005471 	.word	0x08005471
 800545c:	08005479 	.word	0x08005479
 8005460:	08005481 	.word	0x08005481
 8005464:	08005489 	.word	0x08005489
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054bd 	.word	0x080054bd
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e24e      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e24a      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e246      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e242      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005490:	cfff69f3 	.word	0xcfff69f3
 8005494:	58000c00 	.word	0x58000c00
 8005498:	11fff4ff 	.word	0x11fff4ff
 800549c:	40011000 	.word	0x40011000
 80054a0:	58024400 	.word	0x58024400
 80054a4:	40004400 	.word	0x40004400
 80054a8:	40004800 	.word	0x40004800
 80054ac:	40004c00 	.word	0x40004c00
 80054b0:	40005000 	.word	0x40005000
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e22c      	b.n	8005916 <UART_SetConfig+0x7ae>
 80054bc:	2340      	movs	r3, #64	@ 0x40
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e228      	b.n	8005916 <UART_SetConfig+0x7ae>
 80054c4:	2380      	movs	r3, #128	@ 0x80
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e224      	b.n	8005916 <UART_SetConfig+0x7ae>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4ab1      	ldr	r2, [pc, #708]	@ (8005798 <UART_SetConfig+0x630>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d176      	bne.n	80055c4 <UART_SetConfig+0x45c>
 80054d6:	4bb1      	ldr	r3, [pc, #708]	@ (800579c <UART_SetConfig+0x634>)
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054de:	2b28      	cmp	r3, #40	@ 0x28
 80054e0:	d86c      	bhi.n	80055bc <UART_SetConfig+0x454>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <UART_SetConfig+0x380>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	080055bd 	.word	0x080055bd
 80054f0:	080055bd 	.word	0x080055bd
 80054f4:	080055bd 	.word	0x080055bd
 80054f8:	080055bd 	.word	0x080055bd
 80054fc:	080055bd 	.word	0x080055bd
 8005500:	080055bd 	.word	0x080055bd
 8005504:	080055bd 	.word	0x080055bd
 8005508:	08005595 	.word	0x08005595
 800550c:	080055bd 	.word	0x080055bd
 8005510:	080055bd 	.word	0x080055bd
 8005514:	080055bd 	.word	0x080055bd
 8005518:	080055bd 	.word	0x080055bd
 800551c:	080055bd 	.word	0x080055bd
 8005520:	080055bd 	.word	0x080055bd
 8005524:	080055bd 	.word	0x080055bd
 8005528:	0800559d 	.word	0x0800559d
 800552c:	080055bd 	.word	0x080055bd
 8005530:	080055bd 	.word	0x080055bd
 8005534:	080055bd 	.word	0x080055bd
 8005538:	080055bd 	.word	0x080055bd
 800553c:	080055bd 	.word	0x080055bd
 8005540:	080055bd 	.word	0x080055bd
 8005544:	080055bd 	.word	0x080055bd
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055bd 	.word	0x080055bd
 8005550:	080055bd 	.word	0x080055bd
 8005554:	080055bd 	.word	0x080055bd
 8005558:	080055bd 	.word	0x080055bd
 800555c:	080055bd 	.word	0x080055bd
 8005560:	080055bd 	.word	0x080055bd
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055ad 	.word	0x080055ad
 800556c:	080055bd 	.word	0x080055bd
 8005570:	080055bd 	.word	0x080055bd
 8005574:	080055bd 	.word	0x080055bd
 8005578:	080055bd 	.word	0x080055bd
 800557c:	080055bd 	.word	0x080055bd
 8005580:	080055bd 	.word	0x080055bd
 8005584:	080055bd 	.word	0x080055bd
 8005588:	080055b5 	.word	0x080055b5
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e1c0      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e1bc      	b.n	8005916 <UART_SetConfig+0x7ae>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e1b8      	b.n	8005916 <UART_SetConfig+0x7ae>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e1b4      	b.n	8005916 <UART_SetConfig+0x7ae>
 80055ac:	2320      	movs	r3, #32
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e1b0      	b.n	8005916 <UART_SetConfig+0x7ae>
 80055b4:	2340      	movs	r3, #64	@ 0x40
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e1ac      	b.n	8005916 <UART_SetConfig+0x7ae>
 80055bc:	2380      	movs	r3, #128	@ 0x80
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e1a8      	b.n	8005916 <UART_SetConfig+0x7ae>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a75      	ldr	r2, [pc, #468]	@ (80057a0 <UART_SetConfig+0x638>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d130      	bne.n	8005630 <UART_SetConfig+0x4c8>
 80055ce:	4b73      	ldr	r3, [pc, #460]	@ (800579c <UART_SetConfig+0x634>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d826      	bhi.n	8005628 <UART_SetConfig+0x4c0>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0x478>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f9 	.word	0x080055f9
 80055e4:	08005601 	.word	0x08005601
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e18a      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e186      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e182      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e17e      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005618:	2320      	movs	r3, #32
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e17a      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e176      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e172      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a5b      	ldr	r2, [pc, #364]	@ (80057a4 <UART_SetConfig+0x63c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d130      	bne.n	800569c <UART_SetConfig+0x534>
 800563a:	4b58      	ldr	r3, [pc, #352]	@ (800579c <UART_SetConfig+0x634>)
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b05      	cmp	r3, #5
 8005644:	d826      	bhi.n	8005694 <UART_SetConfig+0x52c>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0x4e4>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005665 	.word	0x08005665
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005675 	.word	0x08005675
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e154      	b.n	8005916 <UART_SetConfig+0x7ae>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e150      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e14c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e148      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e144      	b.n	8005916 <UART_SetConfig+0x7ae>
 800568c:	2340      	movs	r3, #64	@ 0x40
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e140      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e13c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a41      	ldr	r2, [pc, #260]	@ (80057a8 <UART_SetConfig+0x640>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f040 8082 	bne.w	80057ac <UART_SetConfig+0x644>
 80056a8:	4b3c      	ldr	r3, [pc, #240]	@ (800579c <UART_SetConfig+0x634>)
 80056aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b0:	2b28      	cmp	r3, #40	@ 0x28
 80056b2:	d86d      	bhi.n	8005790 <UART_SetConfig+0x628>
 80056b4:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <UART_SetConfig+0x554>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	08005761 	.word	0x08005761
 80056c0:	08005791 	.word	0x08005791
 80056c4:	08005791 	.word	0x08005791
 80056c8:	08005791 	.word	0x08005791
 80056cc:	08005791 	.word	0x08005791
 80056d0:	08005791 	.word	0x08005791
 80056d4:	08005791 	.word	0x08005791
 80056d8:	08005791 	.word	0x08005791
 80056dc:	08005769 	.word	0x08005769
 80056e0:	08005791 	.word	0x08005791
 80056e4:	08005791 	.word	0x08005791
 80056e8:	08005791 	.word	0x08005791
 80056ec:	08005791 	.word	0x08005791
 80056f0:	08005791 	.word	0x08005791
 80056f4:	08005791 	.word	0x08005791
 80056f8:	08005791 	.word	0x08005791
 80056fc:	08005771 	.word	0x08005771
 8005700:	08005791 	.word	0x08005791
 8005704:	08005791 	.word	0x08005791
 8005708:	08005791 	.word	0x08005791
 800570c:	08005791 	.word	0x08005791
 8005710:	08005791 	.word	0x08005791
 8005714:	08005791 	.word	0x08005791
 8005718:	08005791 	.word	0x08005791
 800571c:	08005779 	.word	0x08005779
 8005720:	08005791 	.word	0x08005791
 8005724:	08005791 	.word	0x08005791
 8005728:	08005791 	.word	0x08005791
 800572c:	08005791 	.word	0x08005791
 8005730:	08005791 	.word	0x08005791
 8005734:	08005791 	.word	0x08005791
 8005738:	08005791 	.word	0x08005791
 800573c:	08005781 	.word	0x08005781
 8005740:	08005791 	.word	0x08005791
 8005744:	08005791 	.word	0x08005791
 8005748:	08005791 	.word	0x08005791
 800574c:	08005791 	.word	0x08005791
 8005750:	08005791 	.word	0x08005791
 8005754:	08005791 	.word	0x08005791
 8005758:	08005791 	.word	0x08005791
 800575c:	08005789 	.word	0x08005789
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e0d6      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e0d2      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e0ce      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e0ca      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e0c6      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005788:	2340      	movs	r3, #64	@ 0x40
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e0c2      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e0be      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005798:	40011400 	.word	0x40011400
 800579c:	58024400 	.word	0x58024400
 80057a0:	40007800 	.word	0x40007800
 80057a4:	40007c00 	.word	0x40007c00
 80057a8:	40011800 	.word	0x40011800
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4aad      	ldr	r2, [pc, #692]	@ (8005a68 <UART_SetConfig+0x900>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d176      	bne.n	80058a4 <UART_SetConfig+0x73c>
 80057b6:	4bad      	ldr	r3, [pc, #692]	@ (8005a6c <UART_SetConfig+0x904>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057be:	2b28      	cmp	r3, #40	@ 0x28
 80057c0:	d86c      	bhi.n	800589c <UART_SetConfig+0x734>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x660>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	0800586d 	.word	0x0800586d
 80057cc:	0800589d 	.word	0x0800589d
 80057d0:	0800589d 	.word	0x0800589d
 80057d4:	0800589d 	.word	0x0800589d
 80057d8:	0800589d 	.word	0x0800589d
 80057dc:	0800589d 	.word	0x0800589d
 80057e0:	0800589d 	.word	0x0800589d
 80057e4:	0800589d 	.word	0x0800589d
 80057e8:	08005875 	.word	0x08005875
 80057ec:	0800589d 	.word	0x0800589d
 80057f0:	0800589d 	.word	0x0800589d
 80057f4:	0800589d 	.word	0x0800589d
 80057f8:	0800589d 	.word	0x0800589d
 80057fc:	0800589d 	.word	0x0800589d
 8005800:	0800589d 	.word	0x0800589d
 8005804:	0800589d 	.word	0x0800589d
 8005808:	0800587d 	.word	0x0800587d
 800580c:	0800589d 	.word	0x0800589d
 8005810:	0800589d 	.word	0x0800589d
 8005814:	0800589d 	.word	0x0800589d
 8005818:	0800589d 	.word	0x0800589d
 800581c:	0800589d 	.word	0x0800589d
 8005820:	0800589d 	.word	0x0800589d
 8005824:	0800589d 	.word	0x0800589d
 8005828:	08005885 	.word	0x08005885
 800582c:	0800589d 	.word	0x0800589d
 8005830:	0800589d 	.word	0x0800589d
 8005834:	0800589d 	.word	0x0800589d
 8005838:	0800589d 	.word	0x0800589d
 800583c:	0800589d 	.word	0x0800589d
 8005840:	0800589d 	.word	0x0800589d
 8005844:	0800589d 	.word	0x0800589d
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800589d 	.word	0x0800589d
 8005850:	0800589d 	.word	0x0800589d
 8005854:	0800589d 	.word	0x0800589d
 8005858:	0800589d 	.word	0x0800589d
 800585c:	0800589d 	.word	0x0800589d
 8005860:	0800589d 	.word	0x0800589d
 8005864:	0800589d 	.word	0x0800589d
 8005868:	08005895 	.word	0x08005895
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e050      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e04c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e048      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e044      	b.n	8005916 <UART_SetConfig+0x7ae>
 800588c:	2320      	movs	r3, #32
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e040      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005894:	2340      	movs	r3, #64	@ 0x40
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e03c      	b.n	8005916 <UART_SetConfig+0x7ae>
 800589c:	2380      	movs	r3, #128	@ 0x80
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e038      	b.n	8005916 <UART_SetConfig+0x7ae>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a71      	ldr	r2, [pc, #452]	@ (8005a70 <UART_SetConfig+0x908>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d130      	bne.n	8005910 <UART_SetConfig+0x7a8>
 80058ae:	4b6f      	ldr	r3, [pc, #444]	@ (8005a6c <UART_SetConfig+0x904>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d826      	bhi.n	8005908 <UART_SetConfig+0x7a0>
 80058ba:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x758>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058d9 	.word	0x080058d9
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080058e9 	.word	0x080058e9
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e01a      	b.n	8005916 <UART_SetConfig+0x7ae>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e016      	b.n	8005916 <UART_SetConfig+0x7ae>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e012      	b.n	8005916 <UART_SetConfig+0x7ae>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e00e      	b.n	8005916 <UART_SetConfig+0x7ae>
 80058f8:	2320      	movs	r3, #32
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e00a      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005900:	2340      	movs	r3, #64	@ 0x40
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e006      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005908:	2380      	movs	r3, #128	@ 0x80
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e002      	b.n	8005916 <UART_SetConfig+0x7ae>
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a55      	ldr	r2, [pc, #340]	@ (8005a70 <UART_SetConfig+0x908>)
 800591c:	4293      	cmp	r3, r2
 800591e:	f040 80f8 	bne.w	8005b12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005922:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005926:	2b20      	cmp	r3, #32
 8005928:	dc46      	bgt.n	80059b8 <UART_SetConfig+0x850>
 800592a:	2b02      	cmp	r3, #2
 800592c:	db75      	blt.n	8005a1a <UART_SetConfig+0x8b2>
 800592e:	3b02      	subs	r3, #2
 8005930:	2b1e      	cmp	r3, #30
 8005932:	d872      	bhi.n	8005a1a <UART_SetConfig+0x8b2>
 8005934:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x7d4>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	080059bf 	.word	0x080059bf
 8005940:	08005a1b 	.word	0x08005a1b
 8005944:	080059c7 	.word	0x080059c7
 8005948:	08005a1b 	.word	0x08005a1b
 800594c:	08005a1b 	.word	0x08005a1b
 8005950:	08005a1b 	.word	0x08005a1b
 8005954:	080059d7 	.word	0x080059d7
 8005958:	08005a1b 	.word	0x08005a1b
 800595c:	08005a1b 	.word	0x08005a1b
 8005960:	08005a1b 	.word	0x08005a1b
 8005964:	08005a1b 	.word	0x08005a1b
 8005968:	08005a1b 	.word	0x08005a1b
 800596c:	08005a1b 	.word	0x08005a1b
 8005970:	08005a1b 	.word	0x08005a1b
 8005974:	080059e7 	.word	0x080059e7
 8005978:	08005a1b 	.word	0x08005a1b
 800597c:	08005a1b 	.word	0x08005a1b
 8005980:	08005a1b 	.word	0x08005a1b
 8005984:	08005a1b 	.word	0x08005a1b
 8005988:	08005a1b 	.word	0x08005a1b
 800598c:	08005a1b 	.word	0x08005a1b
 8005990:	08005a1b 	.word	0x08005a1b
 8005994:	08005a1b 	.word	0x08005a1b
 8005998:	08005a1b 	.word	0x08005a1b
 800599c:	08005a1b 	.word	0x08005a1b
 80059a0:	08005a1b 	.word	0x08005a1b
 80059a4:	08005a1b 	.word	0x08005a1b
 80059a8:	08005a1b 	.word	0x08005a1b
 80059ac:	08005a1b 	.word	0x08005a1b
 80059b0:	08005a1b 	.word	0x08005a1b
 80059b4:	08005a0d 	.word	0x08005a0d
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d02a      	beq.n	8005a12 <UART_SetConfig+0x8aa>
 80059bc:	e02d      	b.n	8005a1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059be:	f7fe ff61 	bl	8004884 <HAL_RCCEx_GetD3PCLK1Freq>
 80059c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059c4:	e02f      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe ff70 	bl	80048b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d4:	e027      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d6:	f107 0318 	add.w	r3, r7, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f8bc 	bl	8004b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e4:	e01f      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e6:	4b21      	ldr	r3, [pc, #132]	@ (8005a6c <UART_SetConfig+0x904>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <UART_SetConfig+0x904>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a74 <UART_SetConfig+0x90c>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a04:	e00f      	b.n	8005a26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <UART_SetConfig+0x90c>)
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0a:	e00c      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <UART_SetConfig+0x910>)
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 81ee 	beq.w	8005e0a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	4a12      	ldr	r2, [pc, #72]	@ (8005a7c <UART_SetConfig+0x914>)
 8005a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d305      	bcc.n	8005a5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d910      	bls.n	8005a80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a64:	e1d1      	b.n	8005e0a <UART_SetConfig+0xca2>
 8005a66:	bf00      	nop
 8005a68:	40011c00 	.word	0x40011c00
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	58000c00 	.word	0x58000c00
 8005a74:	03d09000 	.word	0x03d09000
 8005a78:	003d0900 	.word	0x003d0900
 8005a7c:	08006508 	.word	0x08006508
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a82:	2200      	movs	r2, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	60fa      	str	r2, [r7, #12]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	4ac0      	ldr	r2, [pc, #768]	@ (8005d90 <UART_SetConfig+0xc28>)
 8005a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2200      	movs	r2, #0
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aa2:	f7fa fc33 	bl	800030c <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	020b      	lsls	r3, r1, #8
 8005ab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005abc:	0202      	lsls	r2, r0, #8
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	6849      	ldr	r1, [r1, #4]
 8005ac2:	0849      	lsrs	r1, r1, #1
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4605      	mov	r5, r0
 8005aca:	eb12 0804 	adds.w	r8, r2, r4
 8005ace:	eb43 0905 	adc.w	r9, r3, r5
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	469a      	mov	sl, r3
 8005ada:	4693      	mov	fp, r2
 8005adc:	4652      	mov	r2, sl
 8005ade:	465b      	mov	r3, fp
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fa fc12 	bl	800030c <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4613      	mov	r3, r2
 8005aee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af6:	d308      	bcc.n	8005b0a <UART_SetConfig+0x9a2>
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d204      	bcs.n	8005b0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e17f      	b.n	8005e0a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b10:	e17b      	b.n	8005e0a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1a:	f040 80bd 	bne.w	8005c98 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	dc48      	bgt.n	8005bb8 <UART_SetConfig+0xa50>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	db7b      	blt.n	8005c22 <UART_SetConfig+0xaba>
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d879      	bhi.n	8005c22 <UART_SetConfig+0xaba>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <UART_SetConfig+0x9cc>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005bbf 	.word	0x08005bbf
 8005b38:	08005bc7 	.word	0x08005bc7
 8005b3c:	08005c23 	.word	0x08005c23
 8005b40:	08005c23 	.word	0x08005c23
 8005b44:	08005bcf 	.word	0x08005bcf
 8005b48:	08005c23 	.word	0x08005c23
 8005b4c:	08005c23 	.word	0x08005c23
 8005b50:	08005c23 	.word	0x08005c23
 8005b54:	08005bdf 	.word	0x08005bdf
 8005b58:	08005c23 	.word	0x08005c23
 8005b5c:	08005c23 	.word	0x08005c23
 8005b60:	08005c23 	.word	0x08005c23
 8005b64:	08005c23 	.word	0x08005c23
 8005b68:	08005c23 	.word	0x08005c23
 8005b6c:	08005c23 	.word	0x08005c23
 8005b70:	08005c23 	.word	0x08005c23
 8005b74:	08005bef 	.word	0x08005bef
 8005b78:	08005c23 	.word	0x08005c23
 8005b7c:	08005c23 	.word	0x08005c23
 8005b80:	08005c23 	.word	0x08005c23
 8005b84:	08005c23 	.word	0x08005c23
 8005b88:	08005c23 	.word	0x08005c23
 8005b8c:	08005c23 	.word	0x08005c23
 8005b90:	08005c23 	.word	0x08005c23
 8005b94:	08005c23 	.word	0x08005c23
 8005b98:	08005c23 	.word	0x08005c23
 8005b9c:	08005c23 	.word	0x08005c23
 8005ba0:	08005c23 	.word	0x08005c23
 8005ba4:	08005c23 	.word	0x08005c23
 8005ba8:	08005c23 	.word	0x08005c23
 8005bac:	08005c23 	.word	0x08005c23
 8005bb0:	08005c23 	.word	0x08005c23
 8005bb4:	08005c15 	.word	0x08005c15
 8005bb8:	2b40      	cmp	r3, #64	@ 0x40
 8005bba:	d02e      	beq.n	8005c1a <UART_SetConfig+0xab2>
 8005bbc:	e031      	b.n	8005c22 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bbe:	f7fd fc95 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 8005bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bc4:	e033      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc6:	f7fd fca7 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8005bca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bcc:	e02f      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fe6c 	bl	80048b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bdc:	e027      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bde:	f107 0318 	add.w	r3, r7, #24
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe ffb8 	bl	8004b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bec:	e01f      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bee:	4b69      	ldr	r3, [pc, #420]	@ (8005d94 <UART_SetConfig+0xc2c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bfa:	4b66      	ldr	r3, [pc, #408]	@ (8005d94 <UART_SetConfig+0xc2c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	08db      	lsrs	r3, r3, #3
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	4a64      	ldr	r2, [pc, #400]	@ (8005d98 <UART_SetConfig+0xc30>)
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c0c:	e00f      	b.n	8005c2e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005c0e:	4b62      	ldr	r3, [pc, #392]	@ (8005d98 <UART_SetConfig+0xc30>)
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c12:	e00c      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c14:	4b61      	ldr	r3, [pc, #388]	@ (8005d9c <UART_SetConfig+0xc34>)
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e009      	b.n	8005c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c20:	e005      	b.n	8005c2e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80ea 	beq.w	8005e0a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	4a55      	ldr	r2, [pc, #340]	@ (8005d90 <UART_SetConfig+0xc28>)
 8005c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c48:	005a      	lsls	r2, r3, #1
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	441a      	add	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d916      	bls.n	8005c90 <UART_SetConfig+0xb28>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d212      	bcs.n	8005c90 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f023 030f 	bic.w	r3, r3, #15
 8005c72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c82:	4313      	orrs	r3, r2
 8005c84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	e0bc      	b.n	8005e0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c96:	e0b8      	b.n	8005e0a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	dc4b      	bgt.n	8005d38 <UART_SetConfig+0xbd0>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f2c0 8087 	blt.w	8005db4 <UART_SetConfig+0xc4c>
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	f200 8084 	bhi.w	8005db4 <UART_SetConfig+0xc4c>
 8005cac:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <UART_SetConfig+0xb4c>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005d3f 	.word	0x08005d3f
 8005cb8:	08005d47 	.word	0x08005d47
 8005cbc:	08005db5 	.word	0x08005db5
 8005cc0:	08005db5 	.word	0x08005db5
 8005cc4:	08005d4f 	.word	0x08005d4f
 8005cc8:	08005db5 	.word	0x08005db5
 8005ccc:	08005db5 	.word	0x08005db5
 8005cd0:	08005db5 	.word	0x08005db5
 8005cd4:	08005d5f 	.word	0x08005d5f
 8005cd8:	08005db5 	.word	0x08005db5
 8005cdc:	08005db5 	.word	0x08005db5
 8005ce0:	08005db5 	.word	0x08005db5
 8005ce4:	08005db5 	.word	0x08005db5
 8005ce8:	08005db5 	.word	0x08005db5
 8005cec:	08005db5 	.word	0x08005db5
 8005cf0:	08005db5 	.word	0x08005db5
 8005cf4:	08005d6f 	.word	0x08005d6f
 8005cf8:	08005db5 	.word	0x08005db5
 8005cfc:	08005db5 	.word	0x08005db5
 8005d00:	08005db5 	.word	0x08005db5
 8005d04:	08005db5 	.word	0x08005db5
 8005d08:	08005db5 	.word	0x08005db5
 8005d0c:	08005db5 	.word	0x08005db5
 8005d10:	08005db5 	.word	0x08005db5
 8005d14:	08005db5 	.word	0x08005db5
 8005d18:	08005db5 	.word	0x08005db5
 8005d1c:	08005db5 	.word	0x08005db5
 8005d20:	08005db5 	.word	0x08005db5
 8005d24:	08005db5 	.word	0x08005db5
 8005d28:	08005db5 	.word	0x08005db5
 8005d2c:	08005db5 	.word	0x08005db5
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005da7 	.word	0x08005da7
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d037      	beq.n	8005dac <UART_SetConfig+0xc44>
 8005d3c:	e03a      	b.n	8005db4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7fd fbd5 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 8005d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d44:	e03c      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d46:	f7fd fbe7 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8005d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d4c:	e038      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fdac 	bl	80048b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d5c:	e030      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d5e:	f107 0318 	add.w	r3, r7, #24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fef8 	bl	8004b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6c:	e028      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <UART_SetConfig+0xc2c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d012      	beq.n	8005da0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <UART_SetConfig+0xc2c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	08db      	lsrs	r3, r3, #3
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	4a04      	ldr	r2, [pc, #16]	@ (8005d98 <UART_SetConfig+0xc30>)
 8005d86:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d8c:	e018      	b.n	8005dc0 <UART_SetConfig+0xc58>
 8005d8e:	bf00      	nop
 8005d90:	08006508 	.word	0x08006508
 8005d94:	58024400 	.word	0x58024400
 8005d98:	03d09000 	.word	0x03d09000
 8005d9c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b24      	ldr	r3, [pc, #144]	@ (8005e34 <UART_SetConfig+0xccc>)
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da4:	e00c      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005da6:	4b24      	ldr	r3, [pc, #144]	@ (8005e38 <UART_SetConfig+0xcd0>)
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005daa:	e009      	b.n	8005dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db2:	e005      	b.n	8005dc0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d021      	beq.n	8005e0a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	4a1c      	ldr	r2, [pc, #112]	@ (8005e3c <UART_SetConfig+0xcd4>)
 8005dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	441a      	add	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d909      	bls.n	8005e04 <UART_SetConfig+0xc9c>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df6:	d205      	bcs.n	8005e04 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e002      	b.n	8005e0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e26:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3748      	adds	r7, #72	@ 0x48
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e34:	03d09000 	.word	0x03d09000
 8005e38:	003d0900 	.word	0x003d0900
 8005e3c:	08006508 	.word	0x08006508

08005e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3e:	d10a      	bne.n	8005f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b098      	sub	sp, #96	@ 0x60
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f94:	f7fb fb08 	bl	80015a8 <HAL_GetTick>
 8005f98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d12f      	bne.n	8006008 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f88e 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d022      	beq.n	8006008 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e6      	bne.n	8005fc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e063      	b.n	80060d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b04      	cmp	r3, #4
 8006014:	d149      	bne.n	80060aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006016:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601e:	2200      	movs	r2, #0
 8006020:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f857 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d03c      	beq.n	80060aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	623b      	str	r3, [r7, #32]
   return(result);
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006050:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e6      	bne.n	8006030 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	60fb      	str	r3, [r7, #12]
   return(result);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006082:	61fa      	str	r2, [r7, #28]
 8006084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	69b9      	ldr	r1, [r7, #24]
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	617b      	str	r3, [r7, #20]
   return(result);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e012      	b.n	80060d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3758      	adds	r7, #88	@ 0x58
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	e04f      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060f0:	d04b      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fb fa59 	bl	80015a8 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <UART_WaitOnFlagUntilTimeout+0x30>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e04e      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d037      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b80      	cmp	r3, #128	@ 0x80
 800611e:	d034      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b40      	cmp	r3, #64	@ 0x40
 8006124:	d031      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b08      	cmp	r3, #8
 8006132:	d110      	bne.n	8006156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2208      	movs	r2, #8
 800613a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f839 	bl	80061b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2208      	movs	r2, #8
 8006146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e029      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006164:	d111      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800616e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f81f 	bl	80061b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e00f      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4013      	ands	r3, r2
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	429a      	cmp	r2, r3
 8006198:	bf0c      	ite	eq
 800619a:	2301      	moveq	r3, #1
 800619c:	2300      	movne	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d0a0      	beq.n	80060ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b095      	sub	sp, #84	@ 0x54
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061da:	643b      	str	r3, [r7, #64]	@ 0x40
 80061dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e6      	bne.n	80061bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	4b1e      	ldr	r3, [pc, #120]	@ (800627c <UART_EndRxTransfer+0xc8>)
 8006202:	4013      	ands	r3, r2
 8006204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800620e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d118      	bne.n	800625c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	60bb      	str	r3, [r7, #8]
   return(result);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 0310 	bic.w	r3, r3, #16
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	613b      	str	r3, [r7, #16]
   return(result);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e6      	bne.n	800622a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006270:	bf00      	nop
 8006272:	3754      	adds	r7, #84	@ 0x54
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	effffffe 	.word	0xeffffffe

08006280 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_UARTEx_DisableFifoMode+0x16>
 8006292:	2302      	movs	r3, #2
 8006294:	e027      	b.n	80062e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2224      	movs	r2, #36	@ 0x24
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006306:	2302      	movs	r3, #2
 8006308:	e02d      	b.n	8006366 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2224      	movs	r2, #36	@ 0x24
 8006316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f850 	bl	80063ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006382:	2302      	movs	r3, #2
 8006384:	e02d      	b.n	80063e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2224      	movs	r2, #36	@ 0x24
 8006392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f812 	bl	80063ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800640c:	e031      	b.n	8006472 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800640e:	2310      	movs	r3, #16
 8006410:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006412:	2310      	movs	r3, #16
 8006414:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	0e5b      	lsrs	r3, r3, #25
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	0f5b      	lsrs	r3, r3, #29
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	7b3a      	ldrb	r2, [r7, #12]
 800643a:	4911      	ldr	r1, [pc, #68]	@ (8006480 <UARTEx_SetNbDataToProcess+0x94>)
 800643c:	5c8a      	ldrb	r2, [r1, r2]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006442:	7b3a      	ldrb	r2, [r7, #12]
 8006444:	490f      	ldr	r1, [pc, #60]	@ (8006484 <UARTEx_SetNbDataToProcess+0x98>)
 8006446:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006448:	fb93 f3f2 	sdiv	r3, r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	7b7a      	ldrb	r2, [r7, #13]
 8006458:	4909      	ldr	r1, [pc, #36]	@ (8006480 <UARTEx_SetNbDataToProcess+0x94>)
 800645a:	5c8a      	ldrb	r2, [r1, r2]
 800645c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006460:	7b7a      	ldrb	r2, [r7, #13]
 8006462:	4908      	ldr	r1, [pc, #32]	@ (8006484 <UARTEx_SetNbDataToProcess+0x98>)
 8006464:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006466:	fb93 f3f2 	sdiv	r3, r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	08006520 	.word	0x08006520
 8006484:	08006528 	.word	0x08006528

08006488 <memset>:
 8006488:	4402      	add	r2, r0
 800648a:	4603      	mov	r3, r0
 800648c:	4293      	cmp	r3, r2
 800648e:	d100      	bne.n	8006492 <memset+0xa>
 8006490:	4770      	bx	lr
 8006492:	f803 1b01 	strb.w	r1, [r3], #1
 8006496:	e7f9      	b.n	800648c <memset+0x4>

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4d0d      	ldr	r5, [pc, #52]	@ (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	@ (80064d4 <__libc_init_array+0x3c>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2600      	movs	r6, #0
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4d0b      	ldr	r5, [pc, #44]	@ (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	@ (80064dc <__libc_init_array+0x44>)
 80064ac:	f000 f818 	bl	80064e0 <_init>
 80064b0:	1b64      	subs	r4, r4, r5
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2600      	movs	r6, #0
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08006538 	.word	0x08006538
 80064d4:	08006538 	.word	0x08006538
 80064d8:	08006538 	.word	0x08006538
 80064dc:	0800653c 	.word	0x0800653c

080064e0 <_init>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr

080064ec <_fini>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr
