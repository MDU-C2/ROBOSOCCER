/* main_cpp.cc
 *==============================================================================
 * Author: Emil Åberg
 * Creation date: 2024-11-11
 * Last modified: 2024-11-11 by Emil Åberg
 * Description: Function that is called within main.c and serves as the main
 * entry point of the  user defined c++ code.
 * License: See LICENSE file for license details.
 *==============================================================================
 */

/* Related .h files */
#include "main_cpp.h"

/* Project .h files */
#include "sensor-drivers/nine_axis_imu.h"
#include "../stm32h7xx_hal.h"
#include "raspberrypi-communicator/rasp_communicator.h"
#include <cstring>


extern "C"
{

// Loopback Test function for UART5, transmitting data entered via terminal (UART3)
void LoopbackTest(UART_HandleTypeDef *huart5, UART_HandleTypeDef *huart3) {
    uint8_t entryMessage[] = "Enter data to transmit via UART5:\r\n"; // Message to prompt user
    HAL_UART_Transmit(huart3, entryMessage, sizeof(entryMessage) - 1, HAL_MAX_DELAY); // Prompt message to UART3

    uint8_t rxBuffer[128] = {0}; // Buffer to receive data from UART3 (terminal input)
    uint8_t txBuffer[128] = {0}; // Buffer to transmit data via UART5

    while (1) {
        // Receive data from terminal via UART3 (user input)
        if (HAL_UART_Receive(huart3, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY) == HAL_OK) {
            // Copy the received data to txBuffer to transmit via UART5
            memcpy(txBuffer, rxBuffer, sizeof(rxBuffer));

            // Transmit received data via UART5
            if (HAL_UART_Transmit(huart5, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY) != HAL_OK) {
                uint8_t errorMessage[] = "Error Transmitting Data via UART5\r\n";
                HAL_UART_Transmit(huart3, errorMessage, sizeof(errorMessage) - 1, HAL_MAX_DELAY); // Print error to UART3
            }

            // Now wait to receive the data back from UART5 (loopback)
            uint8_t loopbackBuffer[128] = {0};
            if (HAL_UART_Receive(huart5, loopbackBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY) == HAL_OK) {
                // Print the received data back to the terminal (UART3)
                const uint8_t feedback[] = "Data Received from UART5: ";
                HAL_UART_Transmit(huart3, feedback, sizeof(feedback) - 1, HAL_MAX_DELAY); // Feedback to UART3
                HAL_UART_Transmit(huart3, loopbackBuffer, strlen((char *)loopbackBuffer), HAL_MAX_DELAY); // Echo received data to UART3
                const uint8_t newLine[] = "\r\n";
                HAL_UART_Transmit(huart3, newLine, sizeof(newLine) - 1, HAL_MAX_DELAY); // New line after the response on UART3
            } else {
                const uint8_t errorMessage[] = "Error Receiving Data from UART5\r\n";
                HAL_UART_Transmit(huart3, errorMessage, sizeof(errorMessage) - 1, HAL_MAX_DELAY); // Print error to UART3
            }
        } else {
            const uint8_t errorMessage[] = "No data received from terminal!\r\n";
            HAL_UART_Transmit(huart3, errorMessage, sizeof(errorMessage) - 1, HAL_MAX_DELAY); // Print error to UART3
        }
    }
}


/* This function serves as the main entry point for the user defined c++ code.
 * All necessary peripheral handles should be added as arguments. */
void MainCpp(I2C_HandleTypeDef hi2c1,
			 I2C_HandleTypeDef hi2c2,
			 I2C_HandleTypeDef hi2c4,
			 I2C_HandleTypeDef hi2c5,
			 UART_HandleTypeDef huart3,
			 UART_HandleTypeDef huart5)
{
  /* Example program to read sensor data via i2c and print it from the PC */
  stm32_code::sensor_drivers::NineAxisIMU imu;
  stm32_code::sensor_drivers::NineAxisIMUData data;

  uint8_t rxBuffer[128]; // Define buffer
  char formattedBuffer[128]; // Define buffer for formatted data


  while(1)
  {
	data = imu.ReadData(&hi2c2);
	imu.PrintData(&huart3, data);

	  // Perform the loopback test
	LoopbackTest(&huart5, &huart3);
	  HAL_Delay(1000); // Delay to prevent flooding
	// Transmit message to Raspberry Pi using rasp_communicator
/*	stm32_code::raspberrypi_communicator::TransmitToRaspberryPi(huart5);
	stm32_code::raspberrypi_communicator::ReceiveFromRaspberryPi(huart5, rxBuffer, sizeof(rxBuffer));*/
	// Format received data into formattedBuffer
	//sprintf(formattedBuffer, "Received: %s\r\n", rxBuffer);

	// Transmit the formatted data to UART3
/*	HAL_UART_Transmit(&huart3, (uint8_t*)formattedBuffer, strlen(formattedBuffer), HAL_MAX_DELAY);*/


	/*HAL_Delay(1000);  // Optional delay of 1 second*/
  }
}

}
