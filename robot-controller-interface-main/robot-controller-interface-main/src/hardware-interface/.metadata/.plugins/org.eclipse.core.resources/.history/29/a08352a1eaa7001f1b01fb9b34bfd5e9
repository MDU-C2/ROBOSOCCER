/* main_cpp.cc
 *==============================================================================
 * Author: Emil Åberg
 * Creation date: 2024-11-11
 * Last modified: 2024-11-11 by Emil Åberg
 * Description: Function that is called within main.c and serves as the main
 * entry point of the  user defined c++ code.
 * License: See LICENSE file for license details.
 *==============================================================================
 */

/* Related .h files */
#include "main_cpp.h"

/* Project .h files */
//#include "sensor-drivers/nine_axis_imu.h"
#include "raspberrypi-communicator/rasp_communicator.h"
#include "../stm32h7xx_hal.h"
#include <cstring>

// Declare UART handlers as extern (defined in main.c)
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart5;

uint8_t tx_buff[] = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74}; // ABCDEFGHIJ in ASCII code
uint8_t rx_buff[10]; // Buffer to store received data

extern "C"
{
    void MainCpp(I2C_HandleTypeDef hi2c1,
                 I2C_HandleTypeDef hi2c2,
                 I2C_HandleTypeDef hi2c4,
                 I2C_HandleTypeDef hi2c5)
    {
        stm32_code::sensor_drivers::NineAxisIMU imu;
        stm32_code::sensor_drivers::NineAxisIMUData data;

        while (1)
        {
            data = imu.ReadData(&hi2c2);
            imu.PrintData(&huart3, data);

            HAL_UART_Transmit_DMA(&huart5, tx_buff, 10);
            HAL_Delay(1000);

            HAL_UART_Receive_DMA(&huart5, rx_buff, 10);
            HAL_UART_Transmit(&huart3, rx_buff, sizeof(rx_buff), HAL_MAX_DELAY);

            HAL_Delay(1000);
        }
    }

    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
        if (huart->Instance == UART5)
        {
            HAL_UART_Receive_DMA(&huart5, rx_buff, 10);
        }
    }
}
