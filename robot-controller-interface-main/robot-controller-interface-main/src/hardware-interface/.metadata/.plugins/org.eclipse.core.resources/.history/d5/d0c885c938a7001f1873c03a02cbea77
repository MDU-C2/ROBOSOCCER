/* main_cpp.cc
 *==============================================================================
 * Author: Emil Ã…berg
 * Creation date: 2024-11-11
 * Last modified: 2024-11-20 by OpenAI
 * Description: Function that is called within main.c and serves as the main
 * entry point of the user-defined C++ code.
 * License: See LICENSE file for license details.
 *==============================================================================
 */

/* Related .h files */
#include "main_cpp.h"

/* Project .h files */
#include "sensor-drivers/nine_axis_imu.h"
#include "raspberrypi-communicator/rasp_communicator.h"
#include "../stm32h7xx_hal.h"
#include <cstring>

extern "C"
{
    uint8_t tx_buff[] = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74}; // ABCDEFGHIJ in ASCII code
    uint8_t rx_buff[10]; // Buffer to store received data

    /* This function serves as the main entry point for the user-defined C++ code.
     * All necessary peripheral handles should be added as arguments. */
    void MainCpp(I2C_HandleTypeDef hi2c1,
                 I2C_HandleTypeDef hi2c2,
                 I2C_HandleTypeDef hi2c4,
                 I2C_HandleTypeDef hi2c5,
                 UART_HandleTypeDef huart3,
                 UART_HandleTypeDef huart5)
    {
        stm32_code::sensor_drivers::NineAxisIMU imu;
        stm32_code::sensor_drivers::NineAxisIMUData data;

        while (1)
        {
            // Read and print IMU data to Minicom (via huart3)
            data = imu.ReadData(&hi2c2);
            imu.PrintData(&huart3, data);

            HAL_UART_Transmit_DMA(&huart5, tx_buff, 10);
              HAL_Delay(10000);

            // Receive data via UART5
              HAL_UART_Receive_DMA(&huart5, rx_buff, 10);

            // Transmit received data to Minicom via huart3
            HAL_UART_Transmit(&huart3, tx_buff, sizeof(rx_buff), HAL_MAX_DELAY);

            // Delay for readability
            HAL_Delay(1000);
        }
    }

    // Interrupt callback for UART5
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
        if (huart->Instance == UART5) // Check if the callback is for UART5
        {
            // Re-enable UART receive interrupt for continuous reception
            HAL_UART_Receive_DMA(&huart5, rx_buff, 10); //You need to toggle a breakpoint on this line!
        }
    }
}
